{"version":3,"sources":["support.js","../../node_modules/loadjs/dist/loadjs.umd.js","types.js","utils.js","html5.js","i18n.js","ui.js","controls.js","captions.js","console.js","defaults.js","fullscreen.js","listeners.js","plugins/vimeo.js","plugins/youtube.js","media.js","plugins/ads.js","source.js","storage.js","plyr.js"],"names":["range","factory","devnull","bundleIdCache","bundleResultCache","bundleCallbackQueue","publish","bundleId","pathsNotFound","q","length","splice","executeCallbacks","args","depsNotFound","call","success","error","loadFile","path","callbackFn","numTries","isCss","e","doc","document","async","maxTries","numRetries","beforeCallbackFn","before","pathStripped","replace","test","createElement","rel","href","src","undefined","onload","onerror","onbeforeload","ev","result","type","sheet","cssText","x","defaultPrevented","head","appendChild","loadjs","paths","arg1","arg2","trim","fn","i","numWaiting","push","loadFiles","ready","deps","bundleIds","r","subscribe","done","reset","isDefined","module","exports","providers","types","utils","input","this","getConstructor","Object","Number","isNaN","String","Boolean","Function","nullOrUndefined","Array","isArray","instanceof","WeakMap","NodeList","Element","Text","Event","TextTrackCue","VTTCue","TextTrack","string","kind","array","nodeList","object","keys","constructor","documentMode","documentElement","style","navigator","userAgent","platform","url","responseType","arguments","Promise","resolve","reject","request","XMLHttpRequest","addEventListener","JSON","parse","responseText","response","Error","statusText","open","send","id","is","hasId","exists","querySelectorAll","container","toggleHidden","setAttribute","support","storage","cached","window","localStorage","getItem","data","content","fetch","then","empty","setItem","stringify","catch","injectSprite","innerHTML","body","insertBefore","childNodes","prefix","Math","floor","random","elements","wrapper","targets","from","reverse","forEach","element","index","child","cloneNode","parent","parentNode","sibling","nextSibling","attributes","text","setAttributes","textContent","target","removeElement","removeChild","lastChild","newChild","oldChild","replaceChild","entries","_ref","key","_ref2","value","sel","existingAttributes","existing","split","s","selector","className","parts","charAt","class","hidden","hide","boolean","hasAttribute","removeAttribute","toggle","contains","classList","prototype","matches","webkitMatchesSelector","mozMatchesSelector","msMatchesSelector","includes","querySelector","focused","activeElement","focusable","getElements","first","last","trap","event","keyCode","getFocusElement","shiftKey","focus","preventDefault","on","off","callback","passive","capture","function","Node","toggleListener","events","options","passiveListeners","bubbles","detail","CustomEvent","assign","dispatchEvent","toggleState","pressed","getAttribute","state","_len","_key","toString","match","current","max","toFixed","parseInt","time","displayHours","inverted","number","formatTime","format","slice","hours","getHours","mins","getMinutes","secs","getSeconds","find","RegExp","toUpperCase","substr","toLowerCase","replaceAll","toTitleCase","toPascalCase","sources","_len2","_key2","source","shift","defineProperty","extend","apply","concat","toConsumableArray","filter","item","indexOf","reduce","prev","curr","abs","youtube","vimeo","$2","parser","search","startsWith","parseUrl","params","hash","_hash$split2","val","decodeURIComponent","map","encodeURIComponent","join","fragment","createDocumentFragment","firstChild","innerText","width","height","ratio","getRatio","w","h","offsetHeight","provider","playsinline","api","ui","browser","getBrowser","canPlayInline","isIPhone","video","rangeInput","audio","webkitSetPresentationMode","WebKitPlaybackTargetAvailabilityEvent","media","isHTML5","canPlayType","isVideo","isAudio","supported","transitionEndEvent","matchMedia","html5","getSources","sizes","dedupe","player","mime","currentTime","playing","load","play","config","blankVideo","debug","log","i18n","seekTime","title","toggleClass","selectors","classNames","uiSupported","listeners","warn","toggleNativeControls","controls","inject","setup","volume","muted","speed","loop","quality","updateVolume","timeUpdate","checkPlaying","pip","airplay","isIos","isTouch","touch","_this","setTitle","setPoster","label","buttons","button","isEmbed","iframe","getElement","poster","posters","backgroundImage","p","paused","stopped","toggleControls","loading","timers","setTimeout","_this2","failed","networkState","_this3","inputs","setRange","mute","updateRangeFill","progress","display","buffer","getElementsByTagName","nodeValue","getPercentage","duration","seek","setProgress","buffered","forceHours","invert","invertTime","updateTimeDisplay","seeking","updateProgress","hasDuration","displayDuration","updateSeekTooltip","isWebkit","setProperty","cors","URL","iconUrl","location","host","isIE","svg4everybody","pause","restart","rewind","fastForward","settings","captions","fullscreen","seekTooltip","tooltip","getIconUrl","iconPath","iconPrefix","icon","createElementNS","use","setAttributeNS","attr","badge","menu","buttonType","toCamelCase","labelPressed","iconPressed","control","createIcon","createLabel","getAttributesFromSelector","suffix","list","checked","radio","faux","insertAdjacentHTML","tooltips","percent","clientRect","getBoundingClientRect","visible","_toggle","pageX","left","hasClass","parseFloat","setting","tabs","panes","toggleTab","checkMenu","emptyElement","sort","a","b","sorting","getLabel","createMenuItem","createBadge","getBadge","updateSetting","pane","active","some","lang","language","default","getTracks","tracks","track","unshift","isVimeo","_this4","values","tab","form","show","isMenuItem","isButton","stopPropagation","clone","position","opacity","name","scrollWidth","scrollHeight","getElementById","transitions","reducedMotion","size","getTabSize","restore","propertyName","createButton","createRange","createProgress","createTime","inner","home","_this5","back","setQualityMenu","getQualityOptions","setSpeedMenu","loadSprite","props","update","create","findElements","repaint","labels","_this6","stored","get","isYouTube","textTracks","setCaptionsMenu","insertAfter","enabled","hostname","protocol","blob","createObjectURL","setLanguage","setCue","mode","currentTrack","getCurrentTrack","activeCues","embed","enableTextTrack","cue","setText","getCueAsHTML","caption","noop","Console","console","bind","defaults","userLanguage","onChange","trapFocus","toggleFallback","scrollPosition","scrollX","scrollY","scrollTo","y","overflow","fallback","Fullscreen","property","native","iosNative","webkitEnterFullscreen","requestFullscreen","webkitExitFullscreen","action","cancelFullScreen","exitFullscreen","exit","enter","fullscreenElement","fullscreenEnabled","webkitFullscreenEnabled","mozFullScreenEnabled","msFullscreenEnabled","pre","Listeners","lastKey","handleKey","toggleMenu","firstTouch","code","which","repeat","altKey","ctrlKey","metaKey","editable","togglePlay","increaseVolume","decreaseVolume","forward","toggleCaptions","keyboard","global","tabFocus","hideControls","durationUpdate","hasAudio","resetOnEnd","checkLoading","ads","initialized","managerPromise","clickToPlay","ended","disableContextMenu","set","inputEvent","proxy","defaultHandler","customHandlerKey","customHandler","returned","hasCustomHandler","showHomeTab","showTab","toggleInvert","hover","webkitDirectionInvertedFromDevice","direction","deltaY","deltaX","setAspectRatio","Vimeo","loadScript","urls","sdk","padding","paddingBottom","offset","transform","autoplay","buildUrlParams","parseVimeoId","embedContainer","replaceElement","thumbnail_large","pathname","Player","autopause","disableTextTrack","stop","setCurrentTime","selected","setPlaybackRate","setVolume","setLoop","currentSrc","getVideoUrl","all","getVideoWidth","getVideoHeight","dimensions","getAspectRatio","setAutopause","getVideoTitle","getCurrentTime","getDuration","getTextTracks","cues","stripHTML","seconds","build","mapQualityUnit","YT","onYouTubeReadyCallbacks","onYouTubeIframeAPIReady","videoId","getVideoData","google","items","snippet","currentId","parseYouTubeId","generateId","message","instance","playbackRate","getPlaybackRate","getTitle","playVideo","pauseVideo","stopVideo","seekTo","getPlaybackQuality","setPlaybackQuality","getAvailablePlaybackRates","buffering","setInterval","getVideoLoadedFraction","lastBuffered","levels","getAvailableQualityLevels","level","wrap","Ads","publisherId","manager","loader","cuePoints","safetyTimer","countdownTimer","ima","googleIMA","trigger","startSafetyTimer","clearSafetyTimer","setupIMA","setVpaidMode","ImaSdkSettings","VpaidMode","ENABLED","setLocale","displayContainer","AdDisplayContainer","requestAds","AdsLoader","AdsManagerLoadedEvent","Type","ADS_MANAGER_LOADED","onAdsManagerLoaded","AdErrorEvent","AD_ERROR","onAdError","AdsRequest","adTagUrl","tagUrl","linearAdSlotWidth","offsetWidth","linearAdSlotHeight","nonLinearAdSlotWidth","nonLinearAdSlotHeight","forceNonLinearFullSlot","setAdWillPlayMuted","getRemainingTime","AdsRenderingSettings","restoreCustomPlaybackStateOnAdBreakComplete","enablePreloading","getAdsManager","getCuePoints","cuePoint","seekElement","cuePercentage","AdEvent","onAdEvent","ad","getAd","_this7","LOADED","pollCountdown","isLinear","ALL_ADS_COMPLETED","loadAds","CONTENT_PAUSE_REQUESTED","pauseContent","CONTENT_RESUME_REQUESTED","resumeContent","STARTED","MIDPOINT","COMPLETE","IMPRESSION","CLICK","cancel","contentComplete","_this8","seekedTime","discardAdBreak","resize","ViewMode","NORMAL","initialize","_this9","init","start","adError","zIndex","_this10","destroy","handlers","handler","_this11","Date","now","base","insertElement","attribute","cancelRequests","check","crossorigin","addStyleHook","insertElements","Storage","store","json","removeItem","Plyr","jQuery","plyr","original","tagName","getProviderByUrl","getUrlParams","truthy","step","webkitShowPlaybackTargetPicker","delay","isEnterFullscreen","noTransition","soft","clear","unload","targetTime","end","fauxDuration","realDuration","mozHasAudio","webkitAudioDecodedByteCount","audioTracks","closest","change","states","webkitPresentationMode","inline","t"],"mappings":"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","file":"plyr.min.js","sourcesContent":["// ==========================================================================\n// Plyr support checks\n// ==========================================================================\n\nimport utils from './utils';\n\n// Check for feature support\nconst support = {\n    // Basic support\n    audio: 'canPlayType' in document.createElement('audio'),\n    video: 'canPlayType' in document.createElement('video'),\n\n    // Check for support\n    // Basic functionality vs full UI\n    check(type, provider, playsinline) {\n        let api = false;\n        let ui = false;\n        const browser = utils.getBrowser();\n        const canPlayInline = browser.isIPhone && playsinline && support.playsinline;\n\n        switch (`${provider}:${type}`) {\n            case 'html5:video':\n                api = support.video;\n                ui = api && support.rangeInput && (!browser.isIPhone || canPlayInline);\n                break;\n\n            case 'html5:audio':\n                api = support.audio;\n                ui = api && support.rangeInput;\n                break;\n\n            case 'youtube:video':\n            case 'vimeo:video':\n                api = true;\n                ui = support.rangeInput && (!browser.isIPhone || canPlayInline);\n                break;\n\n            default:\n                api = support.audio && support.video;\n                ui = api && support.rangeInput;\n        }\n\n        return {\n            api,\n            ui,\n        };\n    },\n\n    // Picture-in-picture support\n    // Safari only currently\n    pip: (() => {\n        const browser = utils.getBrowser();\n        return !browser.isIPhone && utils.is.function(utils.createElement('video').webkitSetPresentationMode);\n    })(),\n\n    // Airplay support\n    // Safari only currently\n    airplay: utils.is.function(window.WebKitPlaybackTargetAvailabilityEvent),\n\n    // Inline playback support\n    // https://webkit.org/blog/6784/new-video-policies-for-ios/\n    playsinline: 'playsInline' in document.createElement('video'),\n\n    // Check for mime type support against a player instance\n    // Credits: http://diveintohtml5.info/everything.html\n    // Related: http://www.leanbackplayer.com/test/h5mt.html\n    mime(type) {\n        const { media } = this;\n\n        try {\n            // Bail if no checking function\n            if (!this.isHTML5 || !utils.is.function(media.canPlayType)) {\n                return false;\n            }\n\n            // Check directly if codecs specified\n            if (type.includes('codecs=')) {\n                return media.canPlayType(type).replace(/no/, '');\n            }\n\n            // Type specific checks\n            if (this.isVideo) {\n                switch (type) {\n                    case 'video/webm':\n                        return media.canPlayType('video/webm; codecs=\"vp8, vorbis\"').replace(/no/, '');\n\n                    case 'video/mp4':\n                        return media.canPlayType('video/mp4; codecs=\"avc1.42E01E, mp4a.40.2\"').replace(/no/, '');\n\n                    case 'video/ogg':\n                        return media.canPlayType('video/ogg; codecs=\"theora\"').replace(/no/, '');\n\n                    default:\n                        return false;\n                }\n            } else if (this.isAudio) {\n                switch (type) {\n                    case 'audio/mpeg':\n                        return media.canPlayType('audio/mpeg;').replace(/no/, '');\n\n                    case 'audio/ogg':\n                        return media.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/no/, '');\n\n                    case 'audio/wav':\n                        return media.canPlayType('audio/wav; codecs=\"1\"').replace(/no/, '');\n\n                    default:\n                        return false;\n                }\n            }\n        } catch (e) {\n            return false;\n        }\n\n        // If we got this far, we're stuffed\n        return false;\n    },\n\n    // Check for textTracks support\n    textTracks: 'textTracks' in document.createElement('video'),\n\n    // Check for passive event listener support\n    // https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md\n    // https://www.youtube.com/watch?v=NPM6172J22g\n    passiveListeners: (() => {\n        // Test via a getter in the options object to see if the passive property is accessed\n        let supported = false;\n        try {\n            const options = Object.defineProperty({}, 'passive', {\n                get() {\n                    supported = true;\n                    return null;\n                },\n            });\n            window.addEventListener('test', null, options);\n        } catch (e) {\n            // Do nothing\n        }\n\n        return supported;\n    })(),\n\n    // <input type=\"range\"> Sliders\n    rangeInput: (() => {\n        const range = document.createElement('input');\n        range.type = 'range';\n        return range.type === 'range';\n    })(),\n\n    // Touch\n    // NOTE: Remember a device can be mouse + touch enabled so we check on first touch event\n    touch: 'ontouchstart' in document.documentElement,\n\n    // Detect transitions support\n    transitions: utils.transitionEndEvent !== false,\n\n    // Reduced motion iOS & MacOS setting\n    // https://webkit.org/blog/7551/responsive-design-for-motion/\n    reducedMotion: 'matchMedia' in window && window.matchMedia('(prefers-reduced-motion)').matches,\n};\n\nexport default support;\n","(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define([], factory);\n  } else if (typeof exports === 'object') {\n    module.exports = factory();\n  } else {\n    root.loadjs = factory();\n  }\n}(this, function() {\n/**\n * Global dependencies.\n * @global {Object} document - DOM\n */\n\nvar devnull = function() {},\n    bundleIdCache = {},\n    bundleResultCache = {},\n    bundleCallbackQueue = {};\n\n\n/**\n * Subscribe to bundle load event.\n * @param {string[]} bundleIds - Bundle ids\n * @param {Function} callbackFn - The callback function\n */\nfunction subscribe(bundleIds, callbackFn) {\n  // listify\n  bundleIds = bundleIds.push ? bundleIds : [bundleIds];\n\n  var depsNotFound = [],\n      i = bundleIds.length,\n      numWaiting = i,\n      fn,\n      bundleId,\n      r,\n      q;\n\n  // define callback function\n  fn = function (bundleId, pathsNotFound) {\n    if (pathsNotFound.length) depsNotFound.push(bundleId);\n\n    numWaiting--;\n    if (!numWaiting) callbackFn(depsNotFound);\n  };\n\n  // register callback\n  while (i--) {\n    bundleId = bundleIds[i];\n\n    // execute callback if in result cache\n    r = bundleResultCache[bundleId];\n    if (r) {\n      fn(bundleId, r);\n      continue;\n    }\n\n    // add to callback queue\n    q = bundleCallbackQueue[bundleId] = bundleCallbackQueue[bundleId] || [];\n    q.push(fn);\n  }\n}\n\n\n/**\n * Publish bundle load event.\n * @param {string} bundleId - Bundle id\n * @param {string[]} pathsNotFound - List of files not found\n */\nfunction publish(bundleId, pathsNotFound) {\n  // exit if id isn't defined\n  if (!bundleId) return;\n\n  var q = bundleCallbackQueue[bundleId];\n\n  // cache result\n  bundleResultCache[bundleId] = pathsNotFound;\n\n  // exit if queue is empty\n  if (!q) return;\n\n  // empty callback queue\n  while (q.length) {\n    q[0](bundleId, pathsNotFound);\n    q.splice(0, 1);\n  }\n}\n\n\n/**\n * Execute callbacks.\n * @param {Object or Function} args - The callback args\n * @param {string[]} depsNotFound - List of dependencies not found\n */\nfunction executeCallbacks(args, depsNotFound) {\n  // accept function as argument\n  if (args.call) args = {success: args};\n\n  // success and error callbacks\n  if (depsNotFound.length) (args.error || devnull)(depsNotFound);\n  else (args.success || devnull)(args);\n}\n\n\n/**\n * Load individual file.\n * @param {string} path - The file path\n * @param {Function} callbackFn - The callback function\n */\nfunction loadFile(path, callbackFn, args, numTries) {\n  var doc = document,\n      async = args.async,\n      maxTries = (args.numRetries || 0) + 1,\n      beforeCallbackFn = args.before || devnull,\n      pathStripped = path.replace(/^(css|img)!/, ''),\n      isCss,\n      e;\n\n  numTries = numTries || 0;\n\n  if (/(^css!|\\.css$)/.test(path)) {\n    isCss = true;\n\n    // css\n    e = doc.createElement('link');\n    e.rel = 'stylesheet';\n    e.href = pathStripped; //.replace(/^css!/, '');  // remove \"css!\" prefix\n  } else if (/(^img!|\\.(png|gif|jpg|svg)$)/.test(path)) {\n    // image\n    e = doc.createElement('img');\n    e.src = pathStripped;    \n  } else {\n    // javascript\n    e = doc.createElement('script');\n    e.src = path;\n    e.async = async === undefined ? true : async;\n  }\n\n  e.onload = e.onerror = e.onbeforeload = function (ev) {\n    var result = ev.type[0];\n\n    // Note: The following code isolates IE using `hideFocus` and treats empty\n    // stylesheets as failures to get around lack of onerror support\n    if (isCss && 'hideFocus' in e) {\n      try {\n        if (!e.sheet.cssText.length) result = 'e';\n      } catch (x) {\n        // sheets objects created from load errors don't allow access to\n        // `cssText`\n        result = 'e';\n      }\n    }\n\n    // handle retries in case of load failure\n    if (result == 'e') {\n      // increment counter\n      numTries += 1;\n\n      // exit function and try again\n      if (numTries < maxTries) {\n        return loadFile(path, callbackFn, args, numTries);\n      }\n    }\n\n    // execute callback\n    callbackFn(path, result, ev.defaultPrevented);\n  };\n\n  // add to document (unless callback returns `false`)\n  if (beforeCallbackFn(path, e) !== false) doc.head.appendChild(e);\n}\n\n\n/**\n * Load multiple files.\n * @param {string[]} paths - The file paths\n * @param {Function} callbackFn - The callback function\n */\nfunction loadFiles(paths, callbackFn, args) {\n  // listify paths\n  paths = paths.push ? paths : [paths];\n\n  var numWaiting = paths.length,\n      x = numWaiting,\n      pathsNotFound = [],\n      fn,\n      i;\n\n  // define callback function\n  fn = function(path, result, defaultPrevented) {\n    // handle error\n    if (result == 'e') pathsNotFound.push(path);\n\n    // handle beforeload event. If defaultPrevented then that means the load\n    // will be blocked (ex. Ghostery/ABP on Safari)\n    if (result == 'b') {\n      if (defaultPrevented) pathsNotFound.push(path);\n      else return;\n    }\n\n    numWaiting--;\n    if (!numWaiting) callbackFn(pathsNotFound);\n  };\n\n  // load scripts\n  for (i=0; i < x; i++) loadFile(paths[i], fn, args);\n}\n\n\n/**\n * Initiate script load and register bundle.\n * @param {(string|string[])} paths - The file paths\n * @param {(string|Function)} [arg1] - The bundleId or success callback\n * @param {Function} [arg2] - The success or error callback\n * @param {Function} [arg3] - The error callback\n */\nfunction loadjs(paths, arg1, arg2) {\n  var bundleId,\n      args;\n\n  // bundleId (if string)\n  if (arg1 && arg1.trim) bundleId = arg1;\n\n  // args (default is {})\n  args = (bundleId ? arg2 : arg1) || {};\n\n  // throw error if bundle is already defined\n  if (bundleId) {\n    if (bundleId in bundleIdCache) {\n      throw \"LoadJS\";\n    } else {\n      bundleIdCache[bundleId] = true;\n    }\n  }\n\n  // load scripts\n  loadFiles(paths, function (pathsNotFound) {\n    // execute callbacks\n    executeCallbacks(args, pathsNotFound);\n\n    // publish bundle load event\n    publish(bundleId, pathsNotFound);\n  }, args);\n}\n\n\n/**\n * Execute callbacks when dependencies have been satisfied.\n * @param {(string|string[])} deps - List of bundle ids\n * @param {Object} args - success/error arguments\n */\nloadjs.ready = function ready(deps, args) {\n  // subscribe to bundle load event\n  subscribe(deps, function (depsNotFound) {\n    // execute callbacks\n    executeCallbacks(args, depsNotFound);\n  });\n\n  return loadjs;\n};\n\n\n/**\n * Manually satisfy bundle dependencies.\n * @param {string} bundleId - The bundle id\n */\nloadjs.done = function done(bundleId) {\n  publish(bundleId, []);\n};\n\n\n/**\n * Reset loadjs dependencies statuses\n */\nloadjs.reset = function reset() {\n  bundleIdCache = {};\n  bundleResultCache = {};\n  bundleCallbackQueue = {};\n};\n\n\n/**\n * Determine if bundle has already been defined\n * @param String} bundleId - The bundle id\n */\nloadjs.isDefined = function isDefined(bundleId) {\n  return bundleId in bundleIdCache;\n};\n\n\n// export\nreturn loadjs;\n\n}));\n","// ==========================================================================\n// Plyr supported types and providers\n// ==========================================================================\n\nexport const providers = {\n    html5: 'html5',\n    youtube: 'youtube',\n    vimeo: 'vimeo',\n};\n\nexport const types = {\n    audio: 'audio',\n    video: 'video',\n};\n\nexport default { providers, types };\n","// ==========================================================================\n// Plyr utils\n// ==========================================================================\n\nimport loadjs from 'loadjs';\nimport support from './support';\nimport { providers } from './types';\n\nconst utils = {\n    // Check variable types\n    is: {\n        object(input) {\n            return this.getConstructor(input) === Object;\n        },\n        number(input) {\n            return this.getConstructor(input) === Number && !Number.isNaN(input);\n        },\n        string(input) {\n            return this.getConstructor(input) === String;\n        },\n        boolean(input) {\n            return this.getConstructor(input) === Boolean;\n        },\n        function(input) {\n            return this.getConstructor(input) === Function;\n        },\n        array(input) {\n            return !this.nullOrUndefined(input) && Array.isArray(input);\n        },\n        weakMap(input) {\n            return this.instanceof(input, WeakMap);\n        },\n        nodeList(input) {\n            return this.instanceof(input, NodeList);\n        },\n        element(input) {\n            return this.instanceof(input, Element);\n        },\n        textNode(input) {\n            return this.getConstructor(input) === Text;\n        },\n        event(input) {\n            return this.instanceof(input, Event);\n        },\n        cue(input) {\n            return this.instanceof(input, TextTrackCue) || this.instanceof(input, VTTCue);\n        },\n        track(input) {\n            return this.instanceof(input, TextTrack) || (!this.nullOrUndefined(input) && this.string(input.kind));\n        },\n        url(input) {\n            return !this.nullOrUndefined(input) && /(ftp|http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-/]))?/.test(input);\n        },\n        nullOrUndefined(input) {\n            return input === null || typeof input === 'undefined';\n        },\n        empty(input) {\n            return (\n                this.nullOrUndefined(input) ||\n                ((this.string(input) || this.array(input) || this.nodeList(input)) && !input.length) ||\n                (this.object(input) && !Object.keys(input).length)\n            );\n        },\n        instanceof(input, constructor) {\n            return Boolean(input && constructor && input instanceof constructor);\n        },\n        getConstructor(input) {\n            return !this.nullOrUndefined(input) ? input.constructor : null;\n        },\n    },\n\n    // Unfortunately, due to mixed support, UA sniffing is required\n    getBrowser() {\n        return {\n            isIE: /* @cc_on!@ */ false || !!document.documentMode,\n            isWebkit: 'WebkitAppearance' in document.documentElement.style && !/Edge/.test(navigator.userAgent),\n            isIPhone: /(iPhone|iPod)/gi.test(navigator.platform),\n            isIos: /(iPad|iPhone|iPod)/gi.test(navigator.platform),\n        };\n    },\n\n    // Fetch wrapper\n    // Using XHR to avoid issues with older browsers\n    fetch(url, responseType = 'text') {\n        return new Promise((resolve, reject) => {\n            try {\n                const request = new XMLHttpRequest();\n\n                // Check for CORS support\n                if (!('withCredentials' in request)) {\n                    return;\n                }\n\n                request.addEventListener('load', () => {\n                    if (responseType === 'text') {\n                        try {\n                            resolve(JSON.parse(request.responseText));\n                        } catch (e) {\n                            resolve(request.responseText);\n                        }\n                    } else {\n                        resolve(request.response);\n                    }\n                });\n\n                request.addEventListener('error', () => {\n                    throw new Error(request.statusText);\n                });\n\n                request.open('GET', url, true);\n\n                // Set the required response type\n                request.responseType = responseType;\n\n                request.send();\n            } catch (e) {\n                reject(e);\n            }\n        });\n    },\n\n    // Load an external script\n    loadScript(url) {\n        return new Promise((resolve, reject) => {\n            loadjs(url, {\n                success: resolve,\n                error: reject,\n            });\n        });\n    },\n\n    // Load an external SVG sprite\n    loadSprite(url, id) {\n        if (!utils.is.string(url)) {\n            return;\n        }\n\n        const prefix = 'cache-';\n        const hasId = utils.is.string(id);\n        let isCached = false;\n\n        const exists = () => document.querySelectorAll(`#${id}`).length;\n\n        function injectSprite(data) {\n            // Check again incase of race condition\n            if (hasId && exists()) {\n                return;\n            }\n\n            // Inject content\n            this.innerHTML = data;\n\n            // Inject the SVG to the body\n            document.body.insertBefore(this, document.body.childNodes[0]);\n        }\n\n        // Only load once if ID set\n        if (!hasId || !exists()) {\n            // Create container\n            const container = document.createElement('div');\n            utils.toggleHidden(container, true);\n\n            if (hasId) {\n                container.setAttribute('id', id);\n            }\n\n            // Check in cache\n            if (support.storage) {\n                const cached = window.localStorage.getItem(prefix + id);\n                isCached = cached !== null;\n\n                if (isCached) {\n                    const data = JSON.parse(cached);\n                    injectSprite.call(container, data.content);\n                    return;\n                }\n            }\n\n            // Get the sprite\n            utils\n                .fetch(url)\n                .then(result => {\n                    if (utils.is.empty(result)) {\n                        return;\n                    }\n\n                    if (support.storage) {\n                        window.localStorage.setItem(\n                            prefix + id,\n                            JSON.stringify({\n                                content: result,\n                            }),\n                        );\n                    }\n\n                    injectSprite.call(container, result);\n                })\n                .catch(() => {});\n        }\n    },\n\n    // Generate a random ID\n    generateId(prefix) {\n        return `${prefix}-${Math.floor(Math.random() * 10000)}`;\n    },\n\n    // Wrap an element\n    wrap(elements, wrapper) {\n        // Convert `elements` to an array, if necessary.\n        const targets = elements.length ? elements : [elements];\n\n        // Loops backwards to prevent having to clone the wrapper on the\n        // first element (see `child` below).\n        Array.from(targets)\n            .reverse()\n            .forEach((element, index) => {\n                const child = index > 0 ? wrapper.cloneNode(true) : wrapper;\n\n                // Cache the current parent and sibling.\n                const parent = element.parentNode;\n                const sibling = element.nextSibling;\n\n                // Wrap the element (is automatically removed from its current\n                // parent).\n                child.appendChild(element);\n\n                // If the element had a sibling, insert the wrapper before\n                // the sibling to maintain the HTML structure; otherwise, just\n                // append it to the parent.\n                if (sibling) {\n                    parent.insertBefore(child, sibling);\n                } else {\n                    parent.appendChild(child);\n                }\n            });\n    },\n\n    // Create a DocumentFragment\n    createElement(type, attributes, text) {\n        // Create a new <element>\n        const element = document.createElement(type);\n\n        // Set all passed attributes\n        if (utils.is.object(attributes)) {\n            utils.setAttributes(element, attributes);\n        }\n\n        // Add text node\n        if (utils.is.string(text)) {\n            element.textContent = text;\n        }\n\n        // Return built element\n        return element;\n    },\n\n    // Inaert an element after another\n    insertAfter(element, target) {\n        target.parentNode.insertBefore(element, target.nextSibling);\n    },\n\n    // Insert a DocumentFragment\n    insertElement(type, parent, attributes, text) {\n        // Inject the new <element>\n        parent.appendChild(utils.createElement(type, attributes, text));\n    },\n\n    // Remove element(s)\n    removeElement(element) {\n        if (utils.is.nodeList(element) || utils.is.array(element)) {\n            Array.from(element).forEach(utils.removeElement);\n            return;\n        }\n\n        if (!utils.is.element(element) || !utils.is.element(element.parentNode)) {\n            return;\n        }\n\n        element.parentNode.removeChild(element);\n    },\n\n    // Remove all child elements\n    emptyElement(element) {\n        let { length } = element.childNodes;\n\n        while (length > 0) {\n            element.removeChild(element.lastChild);\n            length -= 1;\n        }\n    },\n\n    // Replace element\n    replaceElement(newChild, oldChild) {\n        if (!utils.is.element(oldChild) || !utils.is.element(oldChild.parentNode) || !utils.is.element(newChild)) {\n            return null;\n        }\n\n        oldChild.parentNode.replaceChild(newChild, oldChild);\n\n        return newChild;\n    },\n\n    // Set attributes\n    setAttributes(element, attributes) {\n        if (!utils.is.element(element) || utils.is.empty(attributes)) {\n            return;\n        }\n\n        Object.entries(attributes).forEach(([\n            key,\n            value,\n        ]) => {\n            element.setAttribute(key, value);\n        });\n    },\n\n    // Get an attribute object from a string selector\n    getAttributesFromSelector(sel, existingAttributes) {\n        // For example:\n        // '.test' to { class: 'test' }\n        // '#test' to { id: 'test' }\n        // '[data-test=\"test\"]' to { 'data-test': 'test' }\n\n        if (!utils.is.string(sel) || utils.is.empty(sel)) {\n            return {};\n        }\n\n        const attributes = {};\n        const existing = existingAttributes;\n\n        sel.split(',').forEach(s => {\n            // Remove whitespace\n            const selector = s.trim();\n            const className = selector.replace('.', '');\n            const stripped = selector.replace(/[[\\]]/g, '');\n\n            // Get the parts and value\n            const parts = stripped.split('=');\n            const key = parts[0];\n            const value = parts.length > 1 ? parts[1].replace(/[\"']/g, '') : '';\n\n            // Get the first character\n            const start = selector.charAt(0);\n\n            switch (start) {\n                case '.':\n                    // Add to existing classname\n                    if (utils.is.object(existing) && utils.is.string(existing.class)) {\n                        existing.class += ` ${className}`;\n                    }\n\n                    attributes.class = className;\n                    break;\n\n                case '#':\n                    // ID selector\n                    attributes.id = selector.replace('#', '');\n                    break;\n\n                case '[':\n                    // Attribute selector\n                    attributes[key] = value;\n\n                    break;\n\n                default:\n                    break;\n            }\n        });\n\n        return attributes;\n    },\n\n    // Toggle hidden\n    toggleHidden(element, hidden) {\n        if (!utils.is.element(element)) {\n            return;\n        }\n\n        let hide = hidden;\n\n        if (!utils.is.boolean(hide)) {\n            hide = !element.hasAttribute('hidden');\n        }\n\n        if (hide) {\n            element.setAttribute('hidden', '');\n        } else {\n            element.removeAttribute('hidden');\n        }\n    },\n\n    // Toggle class on an element\n    toggleClass(element, className, toggle) {\n        if (utils.is.element(element)) {\n            const contains = element.classList.contains(className);\n\n            element.classList[toggle ? 'add' : 'remove'](className);\n\n            return (toggle && !contains) || (!toggle && contains);\n        }\n\n        return null;\n    },\n\n    // Has class name\n    hasClass(element, className) {\n        return utils.is.element(element) && element.classList.contains(className);\n    },\n\n    // Element matches selector\n    matches(element, selector) {\n        const prototype = { Element };\n\n        function match() {\n            return Array.from(document.querySelectorAll(selector)).includes(this);\n        }\n\n        const matches = prototype.matches || prototype.webkitMatchesSelector || prototype.mozMatchesSelector || prototype.msMatchesSelector || match;\n\n        return matches.call(element, selector);\n    },\n\n    // Find all elements\n    getElements(selector) {\n        return this.elements.container.querySelectorAll(selector);\n    },\n\n    // Find a single element\n    getElement(selector) {\n        return this.elements.container.querySelector(selector);\n    },\n\n    // Get the focused element\n    getFocusElement() {\n        let focused = document.activeElement;\n\n        if (!focused || focused === document.body) {\n            focused = null;\n        } else {\n            focused = document.querySelector(':focus');\n        }\n\n        return focused;\n    },\n\n    // Trap focus inside container\n    trapFocus(element = null, toggle = false) {\n        if (!utils.is.element(element)) {\n            return;\n        }\n\n        const focusable = utils.getElements.call(this, 'button:not(:disabled), input:not(:disabled), [tabindex]');\n        const first = focusable[0];\n        const last = focusable[focusable.length - 1];\n\n        const trap = event => {\n            // Bail if not tab key or not fullscreen\n            if (event.key !== 'Tab' || event.keyCode !== 9) {\n                return;\n            }\n\n            // Get the current focused element\n            const focused = utils.getFocusElement();\n\n            if (focused === last && !event.shiftKey) {\n                // Move focus to first element that can be tabbed if Shift isn't used\n                first.focus();\n                event.preventDefault();\n            } else if (focused === first && event.shiftKey) {\n                // Move focus to last element that can be tabbed if Shift is used\n                last.focus();\n                event.preventDefault();\n            }\n        };\n\n        if (toggle) {\n            utils.on(this.elements.container, 'keydown', trap, false);\n        } else {\n            utils.off(this.elements.container, 'keydown', trap, false);\n        }\n    },\n\n    // Toggle event listener\n    toggleListener(elements, event, callback, toggle = false, passive = true, capture = false) {\n        // Bail if no elemetns, event, or callback\n        if (utils.is.empty(elements) || utils.is.empty(event) || !utils.is.function(callback)) {\n            return;\n        }\n\n        // If a nodelist is passed, call itself on each node\n        if (utils.is.nodeList(elements) || utils.is.array(elements)) {\n            // Create listener for each node\n            Array.from(elements).forEach(element => {\n                if (element instanceof Node) {\n                    utils.toggleListener.call(null, element, event, callback, toggle, passive, capture);\n                }\n            });\n\n            return;\n        }\n\n        // Allow multiple events\n        const events = event.split(' ');\n\n        // Build options\n        // Default to just the capture boolean for browsers with no passive listener support\n        let options = capture;\n\n        // If passive events listeners are supported\n        if (support.passiveListeners) {\n            options = {\n                // Whether the listener can be passive (i.e. default never prevented)\n                passive,\n                // Whether the listener is a capturing listener or not\n                capture,\n            };\n        }\n\n        // If a single node is passed, bind the event listener\n        events.forEach(type => {\n            elements[toggle ? 'addEventListener' : 'removeEventListener'](type, callback, options);\n        });\n    },\n\n    // Bind event handler\n    on(element, events = '', callback, passive = true, capture = false) {\n        utils.toggleListener(element, events, callback, true, passive, capture);\n    },\n\n    // Unbind event handler\n    off(element, events = '', callback, passive = true, capture = false) {\n        utils.toggleListener(element, events, callback, false, passive, capture);\n    },\n\n    // Trigger event\n    dispatchEvent(element, type = '', bubbles = false, detail = {}) {\n        // Bail if no element\n        if (!utils.is.element(element) || utils.is.empty(type)) {\n            return;\n        }\n\n        // Create and dispatch the event\n        const event = new CustomEvent(type, {\n            bubbles,\n            detail: Object.assign({}, detail, {\n                plyr: this,\n            }),\n        });\n\n        // Dispatch the event\n        element.dispatchEvent(event);\n    },\n\n    // Toggle aria-pressed state on a toggle button\n    // http://www.ssbbartgroup.com/blog/how-not-to-misuse-aria-states-properties-and-roles\n    toggleState(element, input) {\n        // If multiple elements passed\n        if (utils.is.array(element) || utils.is.nodeList(element)) {\n            Array.from(element).forEach(target => utils.toggleState(target, input));\n            return;\n        }\n\n        // Bail if no target\n        if (!utils.is.element(element)) {\n            return;\n        }\n\n        // Get state\n        const pressed = element.getAttribute('aria-pressed') === 'true';\n        const state = utils.is.boolean(input) ? input : !pressed;\n\n        // Set the attribute on target\n        element.setAttribute('aria-pressed', state);\n    },\n\n    // Format string\n    format(input, ...args) {\n        if (utils.is.empty(input)) {\n            return input;\n        }\n\n        return input.toString().replace(/{(\\d+)}/g, (match, i) => utils.is.string(args[i]) ? args[i] : '');\n    },\n\n    // Get percentage\n    getPercentage(current, max) {\n        if (current === 0 || max === 0 || Number.isNaN(current) || Number.isNaN(max)) {\n            return 0;\n        }\n\n        return (current / max * 100).toFixed(2);\n    },\n\n    // Time helpers\n    getHours(value) {\n        return parseInt((value / 60 / 60) % 60, 10);\n    },\n    getMinutes(value) {\n        return parseInt((value / 60) % 60, 10);\n    },\n    getSeconds(value) {\n        return parseInt(value % 60, 10);\n    },\n\n    // Format time to UI friendly string\n    formatTime(time = 0, displayHours = false, inverted = false) {\n        // Bail if the value isn't a number\n        if (!utils.is.number(time)) {\n            return this.formatTime(null, displayHours, inverted);\n        }\n\n        // Format time component to add leading zero\n        const format = value => `0${value}`.slice(-2);\n\n        // Breakdown to hours, mins, secs\n        let hours = this.getHours(time);\n        const mins = this.getMinutes(time);\n        const secs = this.getSeconds(time);\n\n        // Do we need to display hours?\n        if (displayHours || hours > 0) {\n            hours = `${hours}:`;\n        } else {\n            hours = '';\n        }\n\n        // Render\n        return `${inverted ? '-' : ''}${hours}${format(mins)}:${format(secs)}`;\n    },\n\n    // Replace all occurances of a string in a string\n    replaceAll(input = '', find = '', replace = '') {\n        return input.replace(new RegExp(find.toString().replace(/([.*+?^=!:${}()|[\\]/\\\\])/g, '\\\\$1'), 'g'), replace.toString());\n    },\n\n    // Convert to title case\n    toTitleCase(input = '') {\n        return input.toString().replace(/\\w\\S*/g, text => text.charAt(0).toUpperCase() + text.substr(1).toLowerCase());\n    },\n\n    // Convert string to pascalCase\n    toPascalCase(input = '') {\n        let string = input.toString();\n\n        // Convert kebab case\n        string = utils.replaceAll(string, '-', ' ');\n\n        // Convert snake case\n        string = utils.replaceAll(string, '_', ' ');\n\n        // Convert to title case\n        string = utils.toTitleCase(string);\n\n        // Convert to pascal case\n        return utils.replaceAll(string, ' ', '');\n    },\n\n    // Convert string to pascalCase\n    toCamelCase(input = '') {\n        let string = input.toString();\n\n        // Convert to pascal case\n        string = utils.toPascalCase(string);\n\n        // Convert first character to lowercase\n        return string.charAt(0).toLowerCase() + string.slice(1);\n    },\n\n    // Deep extend destination object with N more objects\n    extend(target = {}, ...sources) {\n        if (!sources.length) {\n            return target;\n        }\n\n        const source = sources.shift();\n\n        if (!utils.is.object(source)) {\n            return target;\n        }\n\n        Object.keys(source).forEach(key => {\n            if (utils.is.object(source[key])) {\n                if (!Object.keys(target).includes(key)) {\n                    Object.assign(target, { [key]: {} });\n                }\n\n                utils.extend(target[key], source[key]);\n            } else {\n                Object.assign(target, { [key]: source[key] });\n            }\n        });\n\n        return utils.extend(target, ...sources);\n    },\n\n    // Remove duplicates in an array\n    dedupe(array) {\n        if (!utils.is.array(array)) {\n            return array;\n        }\n\n        return array.filter((item, index) => array.indexOf(item) === index);\n    },\n\n    // Get the closest value in an array\n    closest(array, value) {\n        if (!utils.is.array(array) || !array.length) {\n            return null;\n        }\n\n        return array.reduce((prev, curr) => (Math.abs(curr - value) < Math.abs(prev - value) ? curr : prev));\n    },\n\n    // Get the provider for a given URL\n    getProviderByUrl(url) {\n        // YouTube\n        if (/^(https?:\\/\\/)?(www\\.)?(youtube\\.com|youtu\\.?be)\\/.+$/.test(url)) {\n            return providers.youtube;\n        }\n\n        // Vimeo\n        if (/^https?:\\/\\/player.vimeo.com\\/video\\/\\d{0,9}(?=\\b|\\/)/.test(url)) {\n            return providers.vimeo;\n        }\n\n        return null;\n    },\n\n    // Parse YouTube ID from URL\n    parseYouTubeId(url) {\n        if (utils.is.empty(url)) {\n            return null;\n        }\n\n        const regex = /^.*(youtu.be\\/|v\\/|u\\/\\w\\/|embed\\/|watch\\?v=|&v=)([^#&?]*).*/;\n        return url.match(regex) ? RegExp.$2 : url;\n    },\n\n    // Parse Vimeo ID from URL\n    parseVimeoId(url) {\n        if (utils.is.empty(url)) {\n            return null;\n        }\n\n        if (utils.is.number(Number(url))) {\n            return url;\n        }\n\n        const regex = /^.*(vimeo.com\\/|video\\/)(\\d+).*/;\n        return url.match(regex) ? RegExp.$2 : url;\n    },\n\n    // Convert a URL to a location object\n    parseUrl(url) {\n        const parser = document.createElement('a');\n        parser.href = url;\n        return parser;\n    },\n\n    // Get URL query parameters\n    getUrlParams(input) {\n        let search = input;\n\n        // Parse URL if needed\n        if (input.startsWith('http://') || input.startsWith('https://')) {\n            ({ search } = this.parseUrl(input));\n        }\n\n        if (this.is.empty(search)) {\n            return null;\n        }\n\n        const hashes = search.slice(search.indexOf('?') + 1).split('&');\n\n        return hashes.reduce((params, hash) => {\n            const [\n                key,\n                val,\n            ] = hash.split('=');\n\n            return Object.assign(params, { [key]: decodeURIComponent(val) });\n        }, {});\n    },\n\n    // Convert object to URL parameters\n    buildUrlParams(input) {\n        if (!utils.is.object(input)) {\n            return '';\n        }\n\n        return Object.keys(input)\n            .map(key => `${encodeURIComponent(key)}=${encodeURIComponent(input[key])}`)\n            .join('&');\n    },\n\n    // Remove HTML from a string\n    stripHTML(source) {\n        const fragment = document.createDocumentFragment();\n        const element = document.createElement('div');\n        fragment.appendChild(element);\n        element.innerHTML = source;\n        return fragment.firstChild.innerText;\n    },\n\n    // Get aspect ratio for dimensions\n    getAspectRatio(width, height) {\n        const getRatio = (w, h) => (h === 0 ? w : getRatio(h, w % h));\n        const ratio = getRatio(width, height);\n        return `${width / ratio}:${height / ratio}`;\n    },\n\n    // Get the transition end event\n    get transitionEndEvent() {\n        const element = document.createElement('span');\n\n        const events = {\n            WebkitTransition: 'webkitTransitionEnd',\n            MozTransition: 'transitionend',\n            OTransition: 'oTransitionEnd otransitionend',\n            transition: 'transitionend',\n        };\n\n        const type = Object.keys(events).find(event => element.style[event] !== undefined);\n\n        return utils.is.string(type) ? events[type] : false;\n    },\n\n    // Force repaint of element\n    repaint(element) {\n        setTimeout(() => {\n            utils.toggleHidden(element, true);\n            element.offsetHeight; // eslint-disable-line\n            utils.toggleHidden(element, false);\n        }, 0);\n    },\n};\n\nexport default utils;\n","// ==========================================================================\n// Plyr HTML5 helpers\n// ==========================================================================\n\nimport support from './support';\nimport utils from './utils';\n\nconst html5 = {\n    getSources() {\n        if (!this.isHTML5) {\n            return null;\n        }\n\n        return this.media.querySelectorAll('source');\n    },\n\n    // Get quality levels\n    getQualityOptions() {\n        if (!this.isHTML5) {\n            return null;\n        }\n\n        // Get sources\n        const sources = html5.getSources.call(this);\n\n        if (utils.is.empty(sources)) {\n            return null;\n        }\n\n        // Get <source> with size attribute\n        const sizes = Array.from(sources).filter(source => !utils.is.empty(source.getAttribute('size')));\n\n        // If none, bail\n        if (utils.is.empty(sizes)) {\n            return null;\n        }\n\n        // Reduce to unique list\n        return utils.dedupe(sizes.map(source => Number(source.getAttribute('size'))));\n    },\n\n    extend() {\n        if (!this.isHTML5) {\n            return;\n        }\n\n        const player = this;\n\n        // Quality\n        Object.defineProperty(player.media, 'quality', {\n            get() {\n                // Get sources\n                const sources = html5.getSources.call(player);\n\n                if (utils.is.empty(sources)) {\n                    return null;\n                }\n\n                const matches = Array.from(sources).filter(source => source.getAttribute('src') === player.source);\n\n                if (utils.is.empty(matches)) {\n                    return null;\n                }\n\n                return Number(matches[0].getAttribute('size'));\n            },\n            set(input) {\n                // Get sources\n                const sources = html5.getSources.call(player);\n\n                if (utils.is.empty(sources)) {\n                    return;\n                }\n\n                // Get matches for requested size\n                const matches = Array.from(sources).filter(source => Number(source.getAttribute('size')) === input);\n\n                // No matches for requested size\n                if (utils.is.empty(matches)) {\n                    return;\n                }\n\n                // Get supported sources\n                const supported = matches.filter(source => support.mime.call(player, source.getAttribute('type')));\n\n                // No supported sources\n                if (utils.is.empty(supported)) {\n                    return;\n                }\n\n                // Trigger change event\n                utils.dispatchEvent.call(player, player.media, 'qualityrequested', false, {\n                    quality: input,\n                });\n\n                // Get current state\n                const { currentTime, playing } = player;\n\n                // Set new source\n                player.media.src = supported[0].getAttribute('src');\n\n                // Load new source\n                player.media.load();\n\n                // Resume playing\n                if (playing) {\n                    player.play();\n                }\n\n                // Restore time\n                player.currentTime = currentTime;\n\n                // Trigger change event\n                utils.dispatchEvent.call(player, player.media, 'qualitychange', false, {\n                    quality: input,\n                });\n            },\n        });\n    },\n\n    // Cancel current network requests\n    // See https://github.com/sampotts/plyr/issues/174\n    cancelRequests() {\n        if (!this.isHTML5) {\n            return;\n        }\n\n        // Remove child sources\n        utils.removeElement(html5.getSources());\n\n        // Set blank video src attribute\n        // This is to prevent a MEDIA_ERR_SRC_NOT_SUPPORTED error\n        // Info: http://stackoverflow.com/questions/32231579/how-to-properly-dispose-of-an-html5-video-and-close-socket-or-connection\n        this.media.setAttribute('src', this.config.blankVideo);\n\n        // Load the new empty source\n        // This will cancel existing requests\n        // See https://github.com/sampotts/plyr/issues/174\n        this.media.load();\n\n        // Debugging\n        this.debug.log('Cancelled network requests');\n    },\n};\n\nexport default html5;\n","// ==========================================================================\n// Plyr internationalization\n// ==========================================================================\n\nimport utils from './utils';\n\nconst i18n = {\n    get(key = '', config = {}) {\n        if (utils.is.empty(key) || utils.is.empty(config) || !Object.keys(config.i18n).includes(key)) {\n            return '';\n        }\n\n        let string = config.i18n[key];\n\n        const replace = {\n            '{seektime}': config.seekTime,\n            '{title}': config.title,\n        };\n\n        Object.entries(replace).forEach(([\n            key,\n            value,\n        ]) => {\n            string = utils.replaceAll(string, key, value);\n        });\n\n        return string;\n    },\n};\n\nexport default i18n;\n","// ==========================================================================\n// Plyr UI\n// ==========================================================================\n\nimport captions from './captions';\nimport controls from './controls';\nimport i18n from './i18n';\nimport support from './support';\nimport utils from './utils';\n\n// Sniff out the browser\nconst browser = utils.getBrowser();\n\nconst ui = {\n    addStyleHook() {\n        utils.toggleClass(this.elements.container, this.config.selectors.container.replace('.', ''), true);\n        utils.toggleClass(this.elements.container, this.config.classNames.uiSupported, this.supported.ui);\n    },\n\n    // Toggle native HTML5 media controls\n    toggleNativeControls(toggle = false) {\n        if (toggle && this.isHTML5) {\n            this.media.setAttribute('controls', '');\n        } else {\n            this.media.removeAttribute('controls');\n        }\n    },\n\n    // Setup the UI\n    build() {\n        // Re-attach media element listeners\n        // TODO: Use event bubbling?\n        this.listeners.media();\n\n        // Don't setup interface if no support\n        if (!this.supported.ui) {\n            this.debug.warn(`Basic support only for ${this.provider} ${this.type}`);\n\n            // Restore native controls\n            ui.toggleNativeControls.call(this, true);\n\n            // Bail\n            return;\n        }\n\n        // Inject custom controls if not present\n        if (!utils.is.element(this.elements.controls)) {\n            // Inject custom controls\n            controls.inject.call(this);\n\n            // Re-attach control listeners\n            this.listeners.controls();\n        }\n\n        // Remove native controls\n        ui.toggleNativeControls.call(this);\n\n        // Captions\n        captions.setup.call(this);\n\n        // Reset volume\n        this.volume = null;\n\n        // Reset mute state\n        this.muted = null;\n\n        // Reset speed\n        this.speed = null;\n\n        // Reset loop state\n        this.loop = null;\n\n        // Reset quality setting\n        this.quality = null;\n\n        // Reset volume display\n        ui.updateVolume.call(this);\n\n        // Reset time display\n        ui.timeUpdate.call(this);\n\n        // Update the UI\n        ui.checkPlaying.call(this);\n\n        // Check for picture-in-picture support\n        utils.toggleClass(this.elements.container, this.config.classNames.pip.supported, support.pip && this.isHTML5 && this.isVideo);\n\n        // Check for airplay support\n        utils.toggleClass(this.elements.container, this.config.classNames.airplay.supported, support.airplay && this.isHTML5);\n\n        // Add iOS class\n        utils.toggleClass(this.elements.container, this.config.classNames.isIos, browser.isIos);\n\n        // Add touch class\n        utils.toggleClass(this.elements.container, this.config.classNames.isTouch, this.touch);\n\n        // Ready for API calls\n        this.ready = true;\n\n        // Ready event at end of execution stack\n        setTimeout(() => {\n            utils.dispatchEvent.call(this, this.media, 'ready');\n        }, 0);\n\n        // Set the title\n        ui.setTitle.call(this);\n\n        // Set the poster image\n        ui.setPoster.call(this);\n    },\n\n    // Setup aria attribute for play and iframe title\n    setTitle() {\n        // Find the current text\n        let label = i18n.get('play', this.config);\n\n        // If there's a media title set, use that for the label\n        if (utils.is.string(this.config.title) && !utils.is.empty(this.config.title)) {\n            label += `, ${this.config.title}`;\n\n            // Set container label\n            this.elements.container.setAttribute('aria-label', this.config.title);\n        }\n\n        // If there's a play button, set label\n        if (utils.is.nodeList(this.elements.buttons.play)) {\n            Array.from(this.elements.buttons.play).forEach(button => {\n                button.setAttribute('aria-label', label);\n            });\n        }\n\n        // Set iframe title\n        // https://github.com/sampotts/plyr/issues/124\n        if (this.isEmbed) {\n            const iframe = utils.getElement.call(this, 'iframe');\n\n            if (!utils.is.element(iframe)) {\n                return;\n            }\n\n            // Default to media type\n            const title = !utils.is.empty(this.config.title) ? this.config.title : 'video';\n            const format = i18n.get('frameTitle', this.config);\n\n            iframe.setAttribute('title', format.replace('{title}', title));\n        }\n    },\n\n    // Set the poster image\n    setPoster() {\n        if (!utils.is.element(this.elements.poster) || utils.is.empty(this.poster)) {\n            return;\n        }\n\n        // Set the inline style\n        const posters = this.poster.split(',');\n        this.elements.poster.style.backgroundImage = posters.map(p => `url('${p}')`).join(',');\n    },\n\n    // Check playing state\n    checkPlaying(event) {\n        // Class hooks\n        utils.toggleClass(this.elements.container, this.config.classNames.playing, this.playing);\n        utils.toggleClass(this.elements.container, this.config.classNames.paused, this.paused);\n        utils.toggleClass(this.elements.container, this.config.classNames.stopped, this.stopped);\n\n        // Set ARIA state\n        utils.toggleState(this.elements.buttons.play, this.playing);\n\n        // Only update controls on non timeupdate events\n        if (utils.is.event(event) && event.type === 'timeupdate') {\n            return;\n        }\n\n        // Toggle controls\n        this.toggleControls(!this.playing);\n    },\n\n    // Check if media is loading\n    checkLoading(event) {\n        this.loading = [\n            'stalled',\n            'waiting',\n        ].includes(event.type);\n\n        // Clear timer\n        clearTimeout(this.timers.loading);\n\n        // Timer to prevent flicker when seeking\n        this.timers.loading = setTimeout(() => {\n            // Toggle container class hook\n            utils.toggleClass(this.elements.container, this.config.classNames.loading, this.loading);\n\n            // Show controls if loading, hide if done\n            this.toggleControls(this.loading);\n        }, this.loading ? 250 : 0);\n    },\n\n    // Check if media failed to load\n    checkFailed() {\n        // https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/networkState\n        this.failed = this.media.networkState === 3;\n\n        if (this.failed) {\n            utils.toggleClass(this.elements.container, this.config.classNames.loading, false);\n            utils.toggleClass(this.elements.container, this.config.classNames.error, true);\n        }\n\n        // Clear timer\n        clearTimeout(this.timers.failed);\n\n        // Timer to prevent flicker when seeking\n        this.timers.loading = setTimeout(() => {\n            // Toggle container class hook\n            utils.toggleClass(this.elements.container, this.config.classNames.loading, this.loading);\n\n            // Show controls if loading, hide if done\n            this.toggleControls(this.loading);\n        }, this.loading ? 250 : 0);\n    },\n\n    // Update volume UI and storage\n    updateVolume() {\n        if (!this.supported.ui) {\n            return;\n        }\n\n        // Update range\n        if (utils.is.element(this.elements.inputs.volume)) {\n            ui.setRange.call(this, this.elements.inputs.volume, this.muted ? 0 : this.volume);\n        }\n\n        // Update mute state\n        if (utils.is.element(this.elements.buttons.mute)) {\n            utils.toggleState(this.elements.buttons.mute, this.muted || this.volume === 0);\n        }\n    },\n\n    // Update seek value and lower fill\n    setRange(target, value = 0) {\n        if (!utils.is.element(target)) {\n            return;\n        }\n\n        // eslint-disable-next-line\n        target.value = value;\n\n        // Webkit range fill\n        controls.updateRangeFill.call(this, target);\n    },\n\n    // Set <progress> value\n    setProgress(target, input) {\n        const value = utils.is.number(input) ? input : 0;\n        const progress = utils.is.element(target) ? target : this.elements.display.buffer;\n\n        // Update value and label\n        if (utils.is.element(progress)) {\n            progress.value = value;\n\n            // Update text label inside\n            const label = progress.getElementsByTagName('span')[0];\n            if (utils.is.element(label)) {\n                label.childNodes[0].nodeValue = value;\n            }\n        }\n    },\n\n    // Update <progress> elements\n    updateProgress(event) {\n        if (!this.supported.ui || !utils.is.event(event)) {\n            return;\n        }\n\n        let value = 0;\n\n        if (event) {\n            switch (event.type) {\n                // Video playing\n                case 'timeupdate':\n                case 'seeking':\n                    value = utils.getPercentage(this.currentTime, this.duration);\n\n                    // Set seek range value only if it's a 'natural' time event\n                    if (event.type === 'timeupdate') {\n                        ui.setRange.call(this, this.elements.inputs.seek, value);\n                    }\n\n                    break;\n\n                // Check buffer status\n                case 'playing':\n                case 'progress':\n                    ui.setProgress.call(this, this.elements.display.buffer, this.buffered * 100);\n\n                    break;\n\n                default:\n                    break;\n            }\n        }\n    },\n\n    // Update the displayed time\n    updateTimeDisplay(target = null, time = 0, inverted = false) {\n        // Bail if there's no element to display or the value isn't a number\n        if (!utils.is.element(target) || !utils.is.number(time)) {\n            return;\n        }\n\n        // Always display hours if duration is over an hour\n        const forceHours = utils.getHours(this.duration) > 0;\n\n        // eslint-disable-next-line no-param-reassign\n        target.textContent = utils.formatTime(time, forceHours, inverted);\n    },\n\n    // Handle time change event\n    timeUpdate(event) {\n        // Only invert if only one time element is displayed and used for both duration and currentTime\n        const invert = !utils.is.element(this.elements.display.duration) && this.config.invertTime;\n\n        // Duration\n        ui.updateTimeDisplay.call(this, this.elements.display.currentTime, invert ? this.duration - this.currentTime : this.currentTime, invert);\n\n        // Ignore updates while seeking\n        if (event && event.type === 'timeupdate' && this.media.seeking) {\n            return;\n        }\n\n        // Playing progress\n        ui.updateProgress.call(this, event);\n    },\n\n    // Show the duration on metadataloaded\n    durationUpdate() {\n        if (!this.supported.ui) {\n            return;\n        }\n\n        // If there's a spot to display duration\n        const hasDuration = utils.is.element(this.elements.display.duration);\n\n        // If there's only one time display, display duration there\n        if (!hasDuration && this.config.displayDuration && this.paused) {\n            ui.updateTimeDisplay.call(this, this.elements.display.currentTime, this.duration);\n        }\n\n        // If there's a duration element, update content\n        if (hasDuration) {\n            ui.updateTimeDisplay.call(this, this.elements.display.duration, this.duration);\n        }\n\n        // Update the tooltip (if visible)\n        controls.updateSeekTooltip.call(this);\n    },\n};\n\nexport default ui;\n","// ==========================================================================\n// Plyr controls\n// ==========================================================================\n\nimport captions from './captions';\nimport html5 from './html5';\nimport i18n from './i18n';\nimport support from './support';\nimport ui from './ui';\nimport utils from './utils';\n\n// Sniff out the browser\nconst browser = utils.getBrowser();\n\nconst controls = {\n    // Webkit polyfill for lower fill range\n    updateRangeFill(target) {\n        // Get range from event if event passed\n        const range = utils.is.event(target) ? target.target : target;\n\n        // Needs to be a valid <input type='range'>\n        if (!utils.is.element(range) || range.getAttribute('type') !== 'range') {\n            return;\n        }\n\n        // Set aria value for https://github.com/sampotts/plyr/issues/905\n        range.setAttribute('aria-valuenow', range.value);\n\n        // WebKit only\n        if (!browser.isWebkit) {\n            return;\n        }\n\n        // Set CSS custom property\n        range.style.setProperty('--value', `${range.value / range.max * 100}%`);\n    },\n\n    // Get icon URL\n    getIconUrl() {\n        const url = new URL(this.config.iconUrl, window.location);\n        const cors = url.host !== window.location.host || (browser.isIE && !window.svg4everybody);\n\n        return {\n            url: this.config.iconUrl,\n            cors,\n        };\n    },\n\n    // Find the UI controls and store references in custom controls\n    // TODO: Allow settings menus with custom controls\n    findElements() {\n        try {\n            this.elements.controls = utils.getElement.call(this, this.config.selectors.controls.wrapper);\n\n            // Buttons\n            this.elements.buttons = {\n                play: utils.getElements.call(this, this.config.selectors.buttons.play),\n                pause: utils.getElement.call(this, this.config.selectors.buttons.pause),\n                restart: utils.getElement.call(this, this.config.selectors.buttons.restart),\n                rewind: utils.getElement.call(this, this.config.selectors.buttons.rewind),\n                fastForward: utils.getElement.call(this, this.config.selectors.buttons.fastForward),\n                mute: utils.getElement.call(this, this.config.selectors.buttons.mute),\n                pip: utils.getElement.call(this, this.config.selectors.buttons.pip),\n                airplay: utils.getElement.call(this, this.config.selectors.buttons.airplay),\n                settings: utils.getElement.call(this, this.config.selectors.buttons.settings),\n                captions: utils.getElement.call(this, this.config.selectors.buttons.captions),\n                fullscreen: utils.getElement.call(this, this.config.selectors.buttons.fullscreen),\n            };\n\n            // Progress\n            this.elements.progress = utils.getElement.call(this, this.config.selectors.progress);\n\n            // Inputs\n            this.elements.inputs = {\n                seek: utils.getElement.call(this, this.config.selectors.inputs.seek),\n                volume: utils.getElement.call(this, this.config.selectors.inputs.volume),\n            };\n\n            // Display\n            this.elements.display = {\n                buffer: utils.getElement.call(this, this.config.selectors.display.buffer),\n                currentTime: utils.getElement.call(this, this.config.selectors.display.currentTime),\n                duration: utils.getElement.call(this, this.config.selectors.display.duration),\n            };\n\n            // Seek tooltip\n            if (utils.is.element(this.elements.progress)) {\n                this.elements.display.seekTooltip = this.elements.progress.querySelector(`.${this.config.classNames.tooltip}`);\n            }\n\n            return true;\n        } catch (error) {\n            // Log it\n            this.debug.warn('It looks like there is a problem with your custom controls HTML', error);\n\n            // Restore native video controls\n            this.toggleNativeControls(true);\n\n            return false;\n        }\n    },\n\n    // Create <svg> icon\n    createIcon(type, attributes) {\n        const namespace = 'http://www.w3.org/2000/svg';\n        const iconUrl = controls.getIconUrl.call(this);\n        const iconPath = `${!iconUrl.cors ? iconUrl.url : ''}#${this.config.iconPrefix}`;\n\n        // Create <svg>\n        const icon = document.createElementNS(namespace, 'svg');\n        utils.setAttributes(\n            icon,\n            utils.extend(attributes, {\n                role: 'presentation',\n                focusable: 'false',\n            }),\n        );\n\n        // Create the <use> to reference sprite\n        const use = document.createElementNS(namespace, 'use');\n        const path = `${iconPath}-${type}`;\n\n        // Set `href` attributes\n        // https://github.com/sampotts/plyr/issues/460\n        // https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/xlink:href\n        if ('href' in use) {\n            use.setAttributeNS('http://www.w3.org/1999/xlink', 'href', path);\n        } else {\n            use.setAttributeNS('http://www.w3.org/1999/xlink', 'xlink:href', path);\n        }\n\n        // Add <use> to <svg>\n        icon.appendChild(use);\n\n        return icon;\n    },\n\n    // Create hidden text label\n    createLabel(type, attr) {\n        let text = i18n.get(type, this.config);\n        const attributes = Object.assign({}, attr);\n\n        switch (type) {\n            case 'pip':\n                text = 'PIP';\n                break;\n\n            case 'airplay':\n                text = 'AirPlay';\n                break;\n\n            default:\n                break;\n        }\n\n        if ('class' in attributes) {\n            attributes.class += ` ${this.config.classNames.hidden}`;\n        } else {\n            attributes.class = this.config.classNames.hidden;\n        }\n\n        return utils.createElement('span', attributes, text);\n    },\n\n    // Create a badge\n    createBadge(text) {\n        if (utils.is.empty(text)) {\n            return null;\n        }\n\n        const badge = utils.createElement('span', {\n            class: this.config.classNames.menu.value,\n        });\n\n        badge.appendChild(\n            utils.createElement(\n                'span',\n                {\n                    class: this.config.classNames.menu.badge,\n                },\n                text,\n            ),\n        );\n\n        return badge;\n    },\n\n    // Create a <button>\n    createButton(buttonType, attr) {\n        const button = utils.createElement('button');\n        const attributes = Object.assign({}, attr);\n        let type = utils.toCamelCase(buttonType);\n\n        let toggle = false;\n        let label;\n        let icon;\n        let labelPressed;\n        let iconPressed;\n\n        if (!('type' in attributes)) {\n            attributes.type = 'button';\n        }\n\n        if ('class' in attributes) {\n            if (attributes.class.includes(this.config.classNames.control)) {\n                attributes.class += ` ${this.config.classNames.control}`;\n            }\n        } else {\n            attributes.class = this.config.classNames.control;\n        }\n\n        // Large play button\n        switch (buttonType) {\n            case 'play':\n                toggle = true;\n                label = 'play';\n                labelPressed = 'pause';\n                icon = 'play';\n                iconPressed = 'pause';\n                break;\n\n            case 'mute':\n                toggle = true;\n                label = 'mute';\n                labelPressed = 'unmute';\n                icon = 'volume';\n                iconPressed = 'muted';\n                break;\n\n            case 'captions':\n                toggle = true;\n                label = 'enableCaptions';\n                labelPressed = 'disableCaptions';\n                icon = 'captions-off';\n                iconPressed = 'captions-on';\n                break;\n\n            case 'fullscreen':\n                toggle = true;\n                label = 'enterFullscreen';\n                labelPressed = 'exitFullscreen';\n                icon = 'enter-fullscreen';\n                iconPressed = 'exit-fullscreen';\n                break;\n\n            case 'play-large':\n                attributes.class += ` ${this.config.classNames.control}--overlaid`;\n                type = 'play';\n                label = 'play';\n                icon = 'play';\n                break;\n\n            default:\n                label = type;\n                icon = buttonType;\n        }\n\n        // Setup toggle icon and labels\n        if (toggle) {\n            // Icon\n            button.appendChild(controls.createIcon.call(this, iconPressed, { class: 'icon--pressed' }));\n            button.appendChild(controls.createIcon.call(this, icon, { class: 'icon--not-pressed' }));\n\n            // Label/Tooltip\n            button.appendChild(controls.createLabel.call(this, labelPressed, { class: 'label--pressed' }));\n            button.appendChild(controls.createLabel.call(this, label, { class: 'label--not-pressed' }));\n\n            // Add aria attributes\n            attributes['aria-pressed'] = false;\n        } else {\n            button.appendChild(controls.createIcon.call(this, icon));\n            button.appendChild(controls.createLabel.call(this, label));\n        }\n\n        // Merge attributes\n        utils.extend(attributes, utils.getAttributesFromSelector(this.config.selectors.buttons[type], attributes));\n\n        utils.setAttributes(button, attributes);\n\n        // We have multiple play buttons\n        if (type === 'play') {\n            if (!utils.is.array(this.elements.buttons[type])) {\n                this.elements.buttons[type] = [];\n            }\n\n            this.elements.buttons[type].push(button);\n        } else {\n            this.elements.buttons[type] = button;\n        }\n\n        return button;\n    },\n\n    // Create an <input type='range'>\n    createRange(type, attributes) {\n        // Seek label\n        const label = utils.createElement(\n            'label',\n            {\n                for: attributes.id,\n                id: `${attributes.id}-label`,\n                class: this.config.classNames.hidden,\n            },\n            i18n.get(type, this.config),\n        );\n\n        // Seek input\n        const input = utils.createElement(\n            'input',\n            utils.extend(\n                utils.getAttributesFromSelector(this.config.selectors.inputs[type]),\n                {\n                    type: 'range',\n                    min: 0,\n                    max: 100,\n                    step: 0.01,\n                    value: 0,\n                    autocomplete: 'off',\n                    // A11y fixes for https://github.com/sampotts/plyr/issues/905\n                    role: 'slider',\n                    'aria-labelledby': `${attributes.id}-label`,\n                    'aria-valuemin': 0,\n                    'aria-valuemax': 100,\n                    'aria-valuenow': 0,\n                },\n                attributes,\n            ),\n        );\n\n        this.elements.inputs[type] = input;\n\n        // Set the fill for webkit now\n        controls.updateRangeFill.call(this, input);\n\n        return {\n            label,\n            input,\n        };\n    },\n\n    // Create a <progress>\n    createProgress(type, attributes) {\n        const progress = utils.createElement(\n            'progress',\n            utils.extend(\n                utils.getAttributesFromSelector(this.config.selectors.display[type]),\n                {\n                    min: 0,\n                    max: 100,\n                    value: 0,\n                    role: 'presentation',\n                    'aria-hidden': true,\n                },\n                attributes,\n            ),\n        );\n\n        // Create the label inside\n        if (type !== 'volume') {\n            progress.appendChild(utils.createElement('span', null, '0'));\n\n            let suffix = '';\n            switch (type) {\n                case 'played':\n                    suffix = i18n.get('played', this.config);\n                    break;\n\n                case 'buffer':\n                    suffix = i18n.get('buffered', this.config);\n                    break;\n\n                default:\n                    break;\n            }\n\n            progress.textContent = `% ${suffix.toLowerCase()}`;\n        }\n\n        this.elements.display[type] = progress;\n\n        return progress;\n    },\n\n    // Create time display\n    createTime(type) {\n        const attributes = utils.getAttributesFromSelector(this.config.selectors.display[type]);\n\n        const container = utils.createElement('div', utils.extend(attributes, {\n            class: `plyr__time ${attributes.class}`,\n            'aria-label': i18n.get(type, this.config),\n        }), '00:00');\n\n        // Reference for updates\n        this.elements.display[type] = container;\n\n        return container;\n    },\n\n    // Create a settings menu item\n    createMenuItem(value, list, type, title, badge = null, checked = false) {\n        const item = utils.createElement('li');\n\n        const label = utils.createElement('label', {\n            class: this.config.classNames.control,\n        });\n\n        const radio = utils.createElement(\n            'input',\n            utils.extend(utils.getAttributesFromSelector(this.config.selectors.inputs[type]), {\n                type: 'radio',\n                name: `plyr-${type}`,\n                value,\n                checked,\n                class: 'plyr__sr-only',\n            }),\n        );\n\n        const faux = utils.createElement('span', { hidden: '' });\n\n        label.appendChild(radio);\n        label.appendChild(faux);\n        label.insertAdjacentHTML('beforeend', title);\n\n        if (utils.is.element(badge)) {\n            label.appendChild(badge);\n        }\n\n        item.appendChild(label);\n        list.appendChild(item);\n    },\n\n    // Update hover tooltip for seeking\n    updateSeekTooltip(event) {\n        // Bail if setting not true\n        if (\n            !this.config.tooltips.seek ||\n            !utils.is.element(this.elements.inputs.seek) ||\n            !utils.is.element(this.elements.display.seekTooltip) ||\n            this.duration === 0\n        ) {\n            return;\n        }\n\n        // Calculate percentage\n        let percent = 0;\n        const clientRect = this.elements.inputs.seek.getBoundingClientRect();\n        const visible = `${this.config.classNames.tooltip}--visible`;\n\n        const toggle = toggle => {\n            utils.toggleClass(this.elements.display.seekTooltip, visible, toggle);\n        };\n\n        // Hide on touch\n        if (this.touch) {\n            toggle(false);\n            return;\n        }\n\n        // Determine percentage, if already visible\n        if (utils.is.event(event)) {\n            percent = 100 / clientRect.width * (event.pageX - clientRect.left);\n        } else if (utils.hasClass(this.elements.display.seekTooltip, visible)) {\n            percent = parseFloat(this.elements.display.seekTooltip.style.left, 10);\n        } else {\n            return;\n        }\n\n        // Set bounds\n        if (percent < 0) {\n            percent = 0;\n        } else if (percent > 100) {\n            percent = 100;\n        }\n\n        // Display the time a click would seek to\n        ui.updateTimeDisplay.call(this, this.elements.display.seekTooltip, this.duration / 100 * percent);\n\n        // Set position\n        this.elements.display.seekTooltip.style.left = `${percent}%`;\n\n        // Show/hide the tooltip\n        // If the event is a moues in/out and percentage is inside bounds\n        if (utils.is.event(event) && [\n            'mouseenter',\n            'mouseleave',\n        ].includes(event.type)) {\n            toggle(event.type === 'mouseenter');\n        }\n    },\n\n    // Hide/show a tab\n    toggleTab(setting, toggle) {\n        utils.toggleHidden(this.elements.settings.tabs[setting], !toggle);\n    },\n\n    // Set the quality menu\n    // TODO: Vimeo support\n    setQualityMenu(options) {\n        // Menu required\n        if (!utils.is.element(this.elements.settings.panes.quality)) {\n            return;\n        }\n\n        const type = 'quality';\n        const list = this.elements.settings.panes.quality.querySelector('ul');\n\n        // Set options if passed and filter based on config\n        if (utils.is.array(options)) {\n            this.options.quality = options.filter(quality => this.config.quality.options.includes(quality));\n        }\n\n        // Toggle the pane and tab\n        const toggle = !utils.is.empty(this.options.quality) && this.options.quality.length > 1;\n        controls.toggleTab.call(this, type, toggle);\n\n        // Check if we need to toggle the parent\n        controls.checkMenu.call(this);\n\n        // If we're hiding, nothing more to do\n        if (!toggle) {\n            return;\n        }\n\n        // Empty the menu\n        utils.emptyElement(list);\n\n        // Get the badge HTML for HD, 4K etc\n        const getBadge = quality => {\n            let label = '';\n\n            switch (quality) {\n                case 2160:\n                    label = '4K';\n                    break;\n\n                case 1440:\n                case 1080:\n                case 720:\n                    label = 'HD';\n                    break;\n\n                case 576:\n                case 480:\n                    label = 'SD';\n                    break;\n\n                default:\n                    break;\n            }\n\n            if (!label.length) {\n                return null;\n            }\n\n            return controls.createBadge.call(this, label);\n        };\n\n        // Sort options by the config and then render options\n        this.options.quality\n            .sort((a, b) => {\n                const sorting = this.config.quality.options;\n                return sorting.indexOf(a) > sorting.indexOf(b) ? 1 : -1;\n            })\n            .forEach(quality => {\n                const label = controls.getLabel.call(this, 'quality', quality);\n                controls.createMenuItem.call(this, quality, list, type, label, getBadge(quality));\n            });\n\n        controls.updateSetting.call(this, type, list);\n    },\n\n    // Translate a value into a nice label\n    // TODO: Localisation\n    getLabel(setting, value) {\n        switch (setting) {\n            case 'speed':\n                return value === 1 ? i18n.get('normal', this.config) : `${value}&times;`;\n\n            case 'quality':\n                if (utils.is.number(value)) {\n                    return `${value}p`;\n                }\n\n                return utils.toTitleCase(value);\n\n            case 'captions':\n                return captions.getLabel.call(this);\n\n            default:\n                return null;\n        }\n    },\n\n    // Update the selected setting\n    updateSetting(setting, container, input) {\n        const pane = this.elements.settings.panes[setting];\n        let value = null;\n        let list = container;\n\n        switch (setting) {\n            case 'captions':\n                if (this.captions.active) {\n                    if (this.options.captions.length > 2 || !this.options.captions.some(lang => lang === 'enabled')) {\n                        value = this.captions.language;\n                    } else {\n                        value = 'enabled';\n                    }\n                } else {\n                    value = '';\n                }\n\n                break;\n\n            default:\n                value = !utils.is.empty(input) ? input : this[setting];\n\n                // Get default\n                if (utils.is.empty(value)) {\n                    value = this.config[setting].default;\n                }\n\n                // Unsupported value\n                if (!utils.is.empty(this.options[setting]) && !this.options[setting].includes(value)) {\n                    this.debug.warn(`Unsupported value of '${value}' for ${setting}`);\n                    return;\n                }\n\n                // Disabled value\n                if (!this.config[setting].options.includes(value)) {\n                    this.debug.warn(`Disabled value of '${value}' for ${setting}`);\n                    return;\n                }\n\n                break;\n        }\n\n        // Get the list if we need to\n        if (!utils.is.element(list)) {\n            list = pane && pane.querySelector('ul');\n        }\n\n        // If there's no list it means it's not been rendered...\n        if (!utils.is.element(list)) {\n            return;\n        }\n\n        // Update the label\n        const label = this.elements.settings.tabs[setting].querySelector(`.${this.config.classNames.menu.value}`);\n        label.innerHTML = controls.getLabel.call(this, setting, value);\n\n        // Find the radio option and check it\n        const target = list && list.querySelector(`input[value=\"${value}\"]`);\n\n        if (utils.is.element(target)) {\n            target.checked = true;\n        }\n    },\n\n    // Set the looping options\n    /* setLoopMenu() {\n        // Menu required\n        if (!utils.is.element(this.elements.settings.panes.loop)) {\n            return;\n        }\n\n        const options = ['start', 'end', 'all', 'reset'];\n        const list = this.elements.settings.panes.loop.querySelector('ul');\n\n        // Show the pane and tab\n        utils.toggleHidden(this.elements.settings.tabs.loop, false);\n        utils.toggleHidden(this.elements.settings.panes.loop, false);\n\n        // Toggle the pane and tab\n        const toggle = !utils.is.empty(this.loop.options);\n        controls.toggleTab.call(this, 'loop', toggle);\n\n        // Empty the menu\n        utils.emptyElement(list);\n\n        options.forEach(option => {\n            const item = utils.createElement('li');\n\n            const button = utils.createElement(\n                'button',\n                utils.extend(utils.getAttributesFromSelector(this.config.selectors.buttons.loop), {\n                    type: 'button',\n                    class: this.config.classNames.control,\n                    'data-plyr-loop-action': option,\n                }),\n                i18n.get(option, this.config)\n            );\n\n            if (['start', 'end'].includes(option)) {\n                const badge = controls.createBadge.call(this, '00:00');\n                button.appendChild(badge);\n            }\n\n            item.appendChild(button);\n            list.appendChild(item);\n        });\n    }, */\n\n    // Get current selected caption language\n    // TODO: rework this to user the getter in the API?\n\n    // Set a list of available captions languages\n    setCaptionsMenu() {\n        // TODO: Captions or language? Currently it's mixed\n        const type = 'captions';\n        const list = this.elements.settings.panes.captions.querySelector('ul');\n\n        // Toggle the pane and tab\n        const toggle = captions.getTracks.call(this).length;\n        controls.toggleTab.call(this, type, toggle);\n\n        // Empty the menu\n        utils.emptyElement(list);\n\n        // Check if we need to toggle the parent\n        controls.checkMenu.call(this);\n\n        // If there's no captions, bail\n        if (!toggle) {\n            return;\n        }\n\n        // Re-map the tracks into just the data we need\n        const tracks = captions.getTracks.call(this).map(track => ({\n            language: !utils.is.empty(track.language) ? track.language : 'enabled',\n            label: captions.getLabel.call(this, track),\n        }));\n\n        // Add the \"Disabled\" option to turn off captions\n        tracks.unshift({\n            language: '',\n            label: i18n.get('disabled', this.config),\n        });\n\n        // Generate options\n        tracks.forEach(track => {\n            controls.createMenuItem.call(\n                this,\n                track.language,\n                list,\n                'language',\n                track.label,\n                track.language !== 'enabled' ? controls.createBadge.call(this, track.language.toUpperCase()) : null,\n                track.language.toLowerCase() === this.captions.language.toLowerCase(),\n            );\n        });\n\n        // Store reference\n        this.options.captions = tracks.map(track => track.language);\n\n        controls.updateSetting.call(this, type, list);\n    },\n\n    // Set a list of available captions languages\n    setSpeedMenu(options) {\n        // Do nothing if not selected\n        if (!this.config.controls.includes('settings') || !this.config.settings.includes('speed')) {\n            return;\n        }\n\n        // Menu required\n        if (!utils.is.element(this.elements.settings.panes.speed)) {\n            return;\n        }\n\n        const type = 'speed';\n\n        // Set the speed options\n        if (utils.is.array(options)) {\n            this.options.speed = options;\n        } else if (this.isHTML5 || this.isVimeo) {\n            this.options.speed = [\n                0.5,\n                0.75,\n                1,\n                1.25,\n                1.5,\n                1.75,\n                2,\n            ];\n        }\n\n        // Set options if passed and filter based on config\n        this.options.speed = this.options.speed.filter(speed => this.config.speed.options.includes(speed));\n\n        // Toggle the pane and tab\n        const toggle = !utils.is.empty(this.options.speed) && this.options.speed.length > 1;\n        controls.toggleTab.call(this, type, toggle);\n\n        // Check if we need to toggle the parent\n        controls.checkMenu.call(this);\n\n        // If we're hiding, nothing more to do\n        if (!toggle) {\n            return;\n        }\n\n        // Get the list to populate\n        const list = this.elements.settings.panes.speed.querySelector('ul');\n\n        // Empty the menu\n        utils.emptyElement(list);\n\n        // Create items\n        this.options.speed.forEach(speed => {\n            const label = controls.getLabel.call(this, 'speed', speed);\n            controls.createMenuItem.call(this, speed, list, type, label);\n        });\n\n        controls.updateSetting.call(this, type, list);\n    },\n\n    // Check if we need to hide/show the settings menu\n    checkMenu() {\n        const { tabs } = this.elements.settings;\n        const visible = !utils.is.empty(tabs) && Object.values(tabs).some(tab => !tab.hidden);\n\n        utils.toggleHidden(this.elements.settings.menu, !visible);\n    },\n\n    // Show/hide menu\n    toggleMenu(event) {\n        const { form } = this.elements.settings;\n        const button = this.elements.buttons.settings;\n\n        // Menu and button are required\n        if (!utils.is.element(form) || !utils.is.element(button)) {\n            return;\n        }\n\n        const show = utils.is.boolean(event) ? event : utils.is.element(form) && form.hasAttribute('hidden');\n\n        if (utils.is.event(event)) {\n            const isMenuItem = utils.is.element(form) && form.contains(event.target);\n            const isButton = event.target === this.elements.buttons.settings;\n\n            // If the click was inside the form or if the click\n            // wasn't the button or menu item and we're trying to\n            // show the menu (a doc click shouldn't show the menu)\n            if (isMenuItem || (!isMenuItem && !isButton && show)) {\n                return;\n            }\n\n            // Prevent the toggle being caught by the doc listener\n            if (isButton) {\n                event.stopPropagation();\n            }\n        }\n\n        // Set form and button attributes\n        if (utils.is.element(button)) {\n            button.setAttribute('aria-expanded', show);\n        }\n\n        if (utils.is.element(form)) {\n            utils.toggleHidden(form, !show);\n            utils.toggleClass(this.elements.container, this.config.classNames.menu.open, show);\n\n            if (show) {\n                form.removeAttribute('tabindex');\n            } else {\n                form.setAttribute('tabindex', -1);\n            }\n        }\n    },\n\n    // Get the natural size of a tab\n    getTabSize(tab) {\n        const clone = tab.cloneNode(true);\n        clone.style.position = 'absolute';\n        clone.style.opacity = 0;\n        clone.removeAttribute('hidden');\n\n        // Prevent input's being unchecked due to the name being identical\n        Array.from(clone.querySelectorAll('input[name]')).forEach(input => {\n            const name = input.getAttribute('name');\n            input.setAttribute('name', `${name}-clone`);\n        });\n\n        // Append to parent so we get the \"real\" size\n        tab.parentNode.appendChild(clone);\n\n        // Get the sizes before we remove\n        const width = clone.scrollWidth;\n        const height = clone.scrollHeight;\n\n        // Remove from the DOM\n        utils.removeElement(clone);\n\n        return {\n            width,\n            height,\n        };\n    },\n\n    // Toggle Menu\n    showTab(target = '') {\n        const { menu } = this.elements.settings;\n        const pane = document.getElementById(target);\n\n        // Nothing to show, bail\n        if (!utils.is.element(pane)) {\n            return;\n        }\n\n        // Are we targetting a tab? If not, bail\n        const isTab = pane.getAttribute('role') === 'tabpanel';\n        if (!isTab) {\n            return;\n        }\n\n        // Hide all other tabs\n        // Get other tabs\n        const current = menu.querySelector('[role=\"tabpanel\"]:not([hidden])');\n        const container = current.parentNode;\n\n        // Set other toggles to be expanded false\n        Array.from(menu.querySelectorAll(`[aria-controls=\"${current.getAttribute('id')}\"]`)).forEach(toggle => {\n            toggle.setAttribute('aria-expanded', false);\n        });\n\n        // If we can do fancy animations, we'll animate the height/width\n        if (support.transitions && !support.reducedMotion) {\n            // Set the current width as a base\n            container.style.width = `${current.scrollWidth}px`;\n            container.style.height = `${current.scrollHeight}px`;\n\n            // Get potential sizes\n            const size = controls.getTabSize.call(this, pane);\n\n            // Restore auto height/width\n            const restore = e => {\n                // We're only bothered about height and width on the container\n                if (e.target !== container || ![\n                    'width',\n                    'height',\n                ].includes(e.propertyName)) {\n                    return;\n                }\n\n                // Revert back to auto\n                container.style.width = '';\n                container.style.height = '';\n\n                // Only listen once\n                utils.off(container, utils.transitionEndEvent, restore);\n            };\n\n            // Listen for the transition finishing and restore auto height/width\n            utils.on(container, utils.transitionEndEvent, restore);\n\n            // Set dimensions to target\n            container.style.width = `${size.width}px`;\n            container.style.height = `${size.height}px`;\n        }\n\n        // Set attributes on current tab\n        utils.toggleHidden(current, true);\n        current.setAttribute('tabindex', -1);\n\n        // Set attributes on target\n        utils.toggleHidden(pane, false);\n\n        const tabs = utils.getElements.call(this, `[aria-controls=\"${target}\"]`);\n        Array.from(tabs).forEach(tab => {\n            tab.setAttribute('aria-expanded', true);\n        });\n        pane.removeAttribute('tabindex');\n\n        // Focus the first item\n        pane.querySelectorAll('button:not(:disabled), input:not(:disabled), [tabindex]')[0].focus();\n    },\n\n    // Build the default HTML\n    // TODO: Set order based on order in the config.controls array?\n    create(data) {\n        // Do nothing if we want no controls\n        if (utils.is.empty(this.config.controls)) {\n            return null;\n        }\n\n        // Create the container\n        const container = utils.createElement('div', utils.getAttributesFromSelector(this.config.selectors.controls.wrapper));\n\n        // Restart button\n        if (this.config.controls.includes('restart')) {\n            container.appendChild(controls.createButton.call(this, 'restart'));\n        }\n\n        // Rewind button\n        if (this.config.controls.includes('rewind')) {\n            container.appendChild(controls.createButton.call(this, 'rewind'));\n        }\n\n        // Play/Pause button\n        if (this.config.controls.includes('play')) {\n            container.appendChild(controls.createButton.call(this, 'play'));\n        }\n\n        // Fast forward button\n        if (this.config.controls.includes('fast-forward')) {\n            container.appendChild(controls.createButton.call(this, 'fast-forward'));\n        }\n\n        // Progress\n        if (this.config.controls.includes('progress')) {\n            const progress = utils.createElement('div', utils.getAttributesFromSelector(this.config.selectors.progress));\n\n            // Seek range slider\n            const seek = controls.createRange.call(this, 'seek', {\n                id: `plyr-seek-${data.id}`,\n            });\n            progress.appendChild(seek.label);\n            progress.appendChild(seek.input);\n\n            // Buffer progress\n            progress.appendChild(controls.createProgress.call(this, 'buffer'));\n\n            // TODO: Add loop display indicator\n\n            // Seek tooltip\n            if (this.config.tooltips.seek) {\n                const tooltip = utils.createElement(\n                    'span',\n                    {\n                        role: 'tooltip',\n                        class: this.config.classNames.tooltip,\n                    },\n                    '00:00',\n                );\n\n                progress.appendChild(tooltip);\n                this.elements.display.seekTooltip = tooltip;\n            }\n\n            this.elements.progress = progress;\n            container.appendChild(this.elements.progress);\n        }\n\n        // Media current time display\n        if (this.config.controls.includes('current-time')) {\n            container.appendChild(controls.createTime.call(this, 'currentTime'));\n        }\n\n        // Media duration display\n        if (this.config.controls.includes('duration')) {\n            container.appendChild(controls.createTime.call(this, 'duration'));\n        }\n\n        // Toggle mute button\n        if (this.config.controls.includes('mute')) {\n            container.appendChild(controls.createButton.call(this, 'mute'));\n        }\n\n        // Volume range control\n        if (this.config.controls.includes('volume')) {\n            const volume = utils.createElement('div', {\n                class: 'plyr__volume',\n            });\n\n            // Set the attributes\n            const attributes = {\n                max: 1,\n                step: 0.05,\n                value: this.config.volume,\n            };\n\n            // Create the volume range slider\n            const range = controls.createRange.call(\n                this,\n                'volume',\n                utils.extend(attributes, {\n                    id: `plyr-volume-${data.id}`,\n                }),\n            );\n            volume.appendChild(range.label);\n            volume.appendChild(range.input);\n\n            this.elements.volume = volume;\n\n            container.appendChild(volume);\n        }\n\n        // Toggle captions button\n        if (this.config.controls.includes('captions')) {\n            container.appendChild(controls.createButton.call(this, 'captions'));\n        }\n\n        // Settings button / menu\n        if (this.config.controls.includes('settings') && !utils.is.empty(this.config.settings)) {\n            const menu = utils.createElement('div', {\n                class: 'plyr__menu',\n                hidden: '',\n            });\n\n            menu.appendChild(\n                controls.createButton.call(this, 'settings', {\n                    id: `plyr-settings-toggle-${data.id}`,\n                    'aria-haspopup': true,\n                    'aria-controls': `plyr-settings-${data.id}`,\n                    'aria-expanded': false,\n                }),\n            );\n\n            const form = utils.createElement('form', {\n                class: 'plyr__menu__container',\n                id: `plyr-settings-${data.id}`,\n                hidden: '',\n                'aria-labelled-by': `plyr-settings-toggle-${data.id}`,\n                role: 'tablist',\n                tabindex: -1,\n            });\n\n            const inner = utils.createElement('div');\n\n            const home = utils.createElement('div', {\n                id: `plyr-settings-${data.id}-home`,\n                'aria-labelled-by': `plyr-settings-toggle-${data.id}`,\n                role: 'tabpanel',\n            });\n\n            // Create the tab list\n            const tabs = utils.createElement('ul', {\n                role: 'tablist',\n            });\n\n            // Build the tabs\n            this.config.settings.forEach(type => {\n                const tab = utils.createElement('li', {\n                    role: 'tab',\n                    hidden: '',\n                });\n\n                const button = utils.createElement(\n                    'button',\n                    utils.extend(utils.getAttributesFromSelector(this.config.selectors.buttons.settings), {\n                        type: 'button',\n                        class: `${this.config.classNames.control} ${this.config.classNames.control}--forward`,\n                        id: `plyr-settings-${data.id}-${type}-tab`,\n                        'aria-haspopup': true,\n                        'aria-controls': `plyr-settings-${data.id}-${type}`,\n                        'aria-expanded': false,\n                    }),\n                    i18n.get(type, this.config),\n                );\n\n                const value = utils.createElement('span', {\n                    class: this.config.classNames.menu.value,\n                });\n\n                // Speed contains HTML entities\n                value.innerHTML = data[type];\n\n                button.appendChild(value);\n                tab.appendChild(button);\n                tabs.appendChild(tab);\n\n                this.elements.settings.tabs[type] = tab;\n            });\n\n            home.appendChild(tabs);\n            inner.appendChild(home);\n\n            // Build the panes\n            this.config.settings.forEach(type => {\n                const pane = utils.createElement('div', {\n                    id: `plyr-settings-${data.id}-${type}`,\n                    hidden: '',\n                    'aria-labelled-by': `plyr-settings-${data.id}-${type}-tab`,\n                    role: 'tabpanel',\n                    tabindex: -1,\n                });\n\n                const back = utils.createElement(\n                    'button',\n                    {\n                        type: 'button',\n                        class: `${this.config.classNames.control} ${this.config.classNames.control}--back`,\n                        'aria-haspopup': true,\n                        'aria-controls': `plyr-settings-${data.id}-home`,\n                        'aria-expanded': false,\n                    },\n                    i18n.get(type, this.config),\n                );\n\n                pane.appendChild(back);\n\n                const options = utils.createElement('ul');\n\n                pane.appendChild(options);\n                inner.appendChild(pane);\n\n                this.elements.settings.panes[type] = pane;\n            });\n\n            form.appendChild(inner);\n            menu.appendChild(form);\n            container.appendChild(menu);\n\n            this.elements.settings.form = form;\n            this.elements.settings.menu = menu;\n        }\n\n        // Picture in picture button\n        if (this.config.controls.includes('pip') && support.pip) {\n            container.appendChild(controls.createButton.call(this, 'pip'));\n        }\n\n        // Airplay button\n        if (this.config.controls.includes('airplay') && support.airplay) {\n            container.appendChild(controls.createButton.call(this, 'airplay'));\n        }\n\n        // Toggle fullscreen button\n        if (this.config.controls.includes('fullscreen')) {\n            container.appendChild(controls.createButton.call(this, 'fullscreen'));\n        }\n\n        // Larger overlaid play button\n        if (this.config.controls.includes('play-large')) {\n            this.elements.container.appendChild(controls.createButton.call(this, 'play-large'));\n        }\n\n        this.elements.controls = container;\n\n        if (this.isHTML5) {\n            controls.setQualityMenu.call(this, html5.getQualityOptions.call(this));\n        }\n\n        controls.setSpeedMenu.call(this);\n\n        return container;\n    },\n\n    // Insert controls\n    inject() {\n        // Sprite\n        if (this.config.loadSprite) {\n            const icon = controls.getIconUrl.call(this);\n\n            // Only load external sprite using AJAX\n            if (icon.cors) {\n                utils.loadSprite(icon.url, 'sprite-plyr');\n            }\n        }\n\n        // Create a unique ID\n        this.id = Math.floor(Math.random() * 10000);\n\n        // Null by default\n        let container = null;\n        this.elements.controls = null;\n\n        // Set template properties\n        const props = {\n            id: this.id,\n            seektime: this.config.seekTime,\n            title: this.config.title,\n        };\n        let update = true;\n\n        if (utils.is.string(this.config.controls) || utils.is.element(this.config.controls)) {\n            // String or HTMLElement passed as the option\n            container = this.config.controls;\n        } else if (utils.is.function(this.config.controls)) {\n            // A custom function to build controls\n            // The function can return a HTMLElement or String\n            container = this.config.controls.call(this, props);\n        } else {\n            // Create controls\n            container = controls.create.call(this, {\n                id: this.id,\n                seektime: this.config.seekTime,\n                speed: this.speed,\n                quality: this.quality,\n                captions: captions.getLabel.call(this),\n                // TODO: Looping\n                // loop: 'None',\n            });\n            update = false;\n        }\n\n        // Replace props with their value\n        const replace = input => {\n            let result = input;\n\n            Object.entries(props).forEach(([\n                key,\n                value,\n            ]) => {\n                result = utils.replaceAll(result, `{${key}}`, value);\n            });\n\n            return result;\n        };\n\n        // Update markup\n        if (update) {\n            if (utils.is.string(this.config.controls)) {\n                container = replace(container);\n            } else if (utils.is.element(container)) {\n                container.innerHTML = replace(container.innerHTML);\n            }\n        }\n\n        // Controls container\n        let target;\n\n        // Inject to custom location\n        if (utils.is.string(this.config.selectors.controls.container)) {\n            target = document.querySelector(this.config.selectors.controls.container);\n        }\n\n        // Inject into the container by default\n        if (!utils.is.element(target)) {\n            target = this.elements.container;\n        }\n\n        // Inject controls HTML\n        if (utils.is.element(container)) {\n            target.appendChild(container);\n        } else if (container) {\n            target.insertAdjacentHTML('beforeend', container);\n        }\n\n        // Find the elements if need be\n        if (!utils.is.element(this.elements.controls)) {\n            controls.findElements.call(this);\n        }\n\n        // Edge sometimes doesn't finish the paint so force a redraw\n        if (window.navigator.userAgent.includes('Edge')) {\n            utils.repaint(target);\n        }\n\n        // Setup tooltips\n        if (this.config.tooltips.controls) {\n            const labels = utils.getElements.call(\n                this,\n                [\n                    this.config.selectors.controls.wrapper,\n                    ' ',\n                    this.config.selectors.labels,\n                    ' .',\n                    this.config.classNames.hidden,\n                ].join(''),\n            );\n\n            Array.from(labels).forEach(label => {\n                utils.toggleClass(label, this.config.classNames.hidden, false);\n                utils.toggleClass(label, this.config.classNames.tooltip, true);\n                label.setAttribute('role', 'tooltip');\n            });\n        }\n    },\n};\n\nexport default controls;\n","// ==========================================================================\n// Plyr Captions\n// TODO: Create as class\n// ==========================================================================\n\nimport controls from './controls';\nimport i18n from './i18n';\nimport support from './support';\nimport utils from './utils';\n\nconst captions = {\n    // Setup captions\n    setup() {\n        // Requires UI support\n        if (!this.supported.ui) {\n            return;\n        }\n\n        // Set default language if not set\n        const stored = this.storage.get('language');\n\n        if (!utils.is.empty(stored)) {\n            this.captions.language = stored;\n        }\n\n        if (utils.is.empty(this.captions.language)) {\n            this.captions.language = this.config.captions.language.toLowerCase();\n        }\n\n        // Set captions enabled state if not set\n        if (!utils.is.boolean(this.captions.active)) {\n            const active = this.storage.get('captions');\n\n            if (utils.is.boolean(active)) {\n                this.captions.active = active;\n            } else {\n                this.captions.active = this.config.captions.active;\n            }\n        }\n\n        // Only Vimeo and HTML5 video supported at this point\n        if (!this.isVideo || this.isYouTube || (this.isHTML5 && !support.textTracks)) {\n            // Clear menu and hide\n            if (utils.is.array(this.config.controls) && this.config.controls.includes('settings') && this.config.settings.includes('captions')) {\n                controls.setCaptionsMenu.call(this);\n            }\n\n            return;\n        }\n\n        // Inject the container\n        if (!utils.is.element(this.elements.captions)) {\n            this.elements.captions = utils.createElement('div', utils.getAttributesFromSelector(this.config.selectors.captions));\n\n            utils.insertAfter(this.elements.captions, this.elements.wrapper);\n        }\n\n        // Set the class hook\n        utils.toggleClass(this.elements.container, this.config.classNames.captions.enabled, !utils.is.empty(captions.getTracks.call(this)));\n\n        // Get tracks\n        const tracks = captions.getTracks.call(this);\n\n        // If no caption file exists, hide container for caption text\n        if (utils.is.empty(tracks)) {\n            return;\n        }\n\n        // Get browser info\n        const browser = utils.getBrowser();\n\n        // Fix IE captions if CORS is used\n        // Fetch captions and inject as blobs instead (data URIs not supported!)\n        if (browser.isIE && window.URL) {\n            const elements = this.media.querySelectorAll('track');\n\n            Array.from(elements).forEach(track => {\n                const src = track.getAttribute('src');\n                const href = utils.parseUrl(src);\n\n                if (href.hostname !== window.location.href.hostname && [\n                    'http:',\n                    'https:',\n                ].includes(href.protocol)) {\n                    utils\n                        .fetch(src, 'blob')\n                        .then(blob => {\n                            track.setAttribute('src', window.URL.createObjectURL(blob));\n                        })\n                        .catch(() => {\n                            utils.removeElement(track);\n                        });\n                }\n            });\n        }\n\n        // Set language\n        captions.setLanguage.call(this);\n\n        // Enable UI\n        captions.show.call(this);\n\n        // Set available languages in list\n        if (utils.is.array(this.config.controls) && this.config.controls.includes('settings') && this.config.settings.includes('captions')) {\n            controls.setCaptionsMenu.call(this);\n        }\n    },\n\n    // Set the captions language\n    setLanguage() {\n        // Setup HTML5 track rendering\n        if (this.isHTML5 && this.isVideo) {\n            captions.getTracks.call(this).forEach(track => {\n                // Show track\n                utils.on(track, 'cuechange', event => captions.setCue.call(this, event));\n\n                // Turn off native caption rendering to avoid double captions\n                // eslint-disable-next-line\n                track.mode = 'hidden';\n            });\n\n            // Get current track\n            const currentTrack = captions.getCurrentTrack.call(this);\n\n            // Check if suported kind\n            if (utils.is.track(currentTrack)) {\n                // If we change the active track while a cue is already displayed we need to update it\n                if (Array.from(currentTrack.activeCues || []).length) {\n                    captions.setCue.call(this, currentTrack);\n                }\n            }\n        } else if (this.isVimeo && this.captions.active) {\n            this.embed.enableTextTrack(this.language);\n        }\n    },\n\n    // Get the tracks\n    getTracks() {\n        // Return empty array at least\n        if (utils.is.nullOrUndefined(this.media)) {\n            return [];\n        }\n\n        // Only get accepted kinds\n        return Array.from(this.media.textTracks || []).filter(track => [\n            'captions',\n            'subtitles',\n        ].includes(track.kind));\n    },\n\n    // Get the current track for the current language\n    getCurrentTrack() {\n        const tracks = captions.getTracks.call(this);\n\n        if (!tracks.length) {\n            return null;\n        }\n\n        // Get track based on current language\n        let track = tracks.find(track => track.language.toLowerCase() === this.language);\n\n        // Get the <track> with default attribute\n        if (!track) {\n            track = utils.getElement.call(this, 'track[default]');\n        }\n\n        // Get the first track\n        if (!track) {\n            [track] = tracks;\n        }\n\n        return track;\n    },\n\n    // Get UI label for track\n    getLabel(track) {\n        let currentTrack = track;\n\n        if (!utils.is.track(currentTrack) && support.textTracks && this.captions.active) {\n            currentTrack = captions.getCurrentTrack.call(this);\n        }\n\n        if (utils.is.track(currentTrack)) {\n            if (!utils.is.empty(currentTrack.label)) {\n                return currentTrack.label;\n            }\n\n            if (!utils.is.empty(currentTrack.language)) {\n                return track.language.toUpperCase();\n            }\n\n            return i18n.get('enabled', this.config);\n        }\n\n        return i18n.get('disabled', this.config);\n    },\n\n    // Display active caption if it contains text\n    setCue(input) {\n        // Get the track from the event if needed\n        const track = utils.is.event(input) ? input.target : input;\n        const { activeCues } = track;\n        const active = activeCues.length && activeCues[0];\n        const currentTrack = captions.getCurrentTrack.call(this);\n\n        // Only display current track\n        if (track !== currentTrack) {\n            return;\n        }\n\n        // Display a cue, if there is one\n        if (utils.is.cue(active)) {\n            captions.setText.call(this, active.getCueAsHTML());\n        } else {\n            captions.setText.call(this, null);\n        }\n\n        utils.dispatchEvent.call(this, this.media, 'cuechange');\n    },\n\n    // Set the current caption\n    setText(input) {\n        // Requires UI\n        if (!this.supported.ui) {\n            return;\n        }\n\n        if (utils.is.element(this.elements.captions)) {\n            const content = utils.createElement('span');\n\n            // Empty the container\n            utils.emptyElement(this.elements.captions);\n\n            // Default to empty\n            const caption = !utils.is.nullOrUndefined(input) ? input : '';\n\n            // Set the span content\n            if (utils.is.string(caption)) {\n                content.textContent = caption.trim();\n            } else {\n                content.appendChild(caption);\n            }\n\n            // Set new caption text\n            this.elements.captions.appendChild(content);\n        } else {\n            this.debug.warn('No captions element to render to');\n        }\n    },\n\n    // Display captions container and button (for initialization)\n    show() {\n        // Try to load the value from storage\n        let active = this.storage.get('captions');\n\n        // Otherwise fall back to the default config\n        if (!utils.is.boolean(active)) {\n            ({ active } = this.config.captions);\n        } else {\n            this.captions.active = active;\n        }\n\n        if (active) {\n            utils.toggleClass(this.elements.container, this.config.classNames.captions.active, true);\n            utils.toggleState(this.elements.buttons.captions, true);\n        }\n    },\n};\n\nexport default captions;\n","// ==========================================================================\n// Console wrapper\n// ==========================================================================\n\nconst noop = () => {};\n\nexport default class Console {\n    constructor(enabled = false) {\n        this.enabled = window.console && enabled;\n\n        if (this.enabled) {\n            this.log('Debugging enabled');\n        }\n    }\n\n    get log() {\n        // eslint-disable-next-line no-console\n        return this.enabled ? Function.prototype.bind.call(console.log, console) : noop;\n    }\n    get warn() {\n        // eslint-disable-next-line no-console\n        return this.enabled ? Function.prototype.bind.call(console.warn, console) : noop;\n    }\n    get error() {\n        // eslint-disable-next-line no-console\n        return this.enabled ? Function.prototype.bind.call(console.error, console) : noop;\n    }\n}\n","// ==========================================================================\n// Plyr default config\n// ==========================================================================\n\nconst defaults = {\n    // Disable\n    enabled: true,\n\n    // Custom media title\n    title: '',\n\n    // Logging to console\n    debug: false,\n\n    // Auto play (if supported)\n    autoplay: false,\n\n    // Only allow one media playing at once (vimeo only)\n    autopause: true,\n\n    // Default time to skip when rewind/fast forward\n    seekTime: 10,\n\n    // Default volume\n    volume: 1,\n    muted: false,\n\n    // Pass a custom duration\n    duration: null,\n\n    // Display the media duration on load in the current time position\n    // If you have opted to display both duration and currentTime, this is ignored\n    displayDuration: true,\n\n    // Invert the current time to be a countdown\n    invertTime: true,\n\n    // Clicking the currentTime inverts it's value to show time left rather than elapsed\n    toggleInvert: true,\n\n    // Aspect ratio (for embeds)\n    ratio: '16:9',\n\n    // Click video container to play/pause\n    clickToPlay: true,\n\n    // Auto hide the controls\n    hideControls: true,\n\n    // Reset to start when playback ended\n    resetOnEnd: false,\n\n    // Disable the standard context menu\n    disableContextMenu: true,\n\n    // Sprite (for icons)\n    loadSprite: true,\n    iconPrefix: 'plyr',\n    iconUrl: 'https://cdn.plyr.io/3.3.7/plyr.svg',\n\n    // Blank video (used to prevent errors on source change)\n    blankVideo: 'https://cdn.plyr.io/static/blank.mp4',\n\n    // Quality default\n    quality: {\n        default: 576,\n        options: [\n            4320,\n            2880,\n            2160,\n            1440,\n            1080,\n            720,\n            576,\n            480,\n            360,\n            240,\n            'default', // YouTube's \"auto\"\n        ],\n    },\n\n    // Set loops\n    loop: {\n        active: false,\n        // start: null,\n        // end: null,\n    },\n\n    // Speed default and options to display\n    speed: {\n        selected: 1,\n        options: [\n            0.5,\n            0.75,\n            1,\n            1.25,\n            1.5,\n            1.75,\n            2,\n        ],\n    },\n\n    // Keyboard shortcut settings\n    keyboard: {\n        focused: true,\n        global: false,\n    },\n\n    // Display tooltips\n    tooltips: {\n        controls: false,\n        seek: true,\n    },\n\n    // Captions settings\n    captions: {\n        active: false,\n        language: (navigator.language || navigator.userLanguage).split('-')[0],\n    },\n\n    // Fullscreen settings\n    fullscreen: {\n        enabled: true, // Allow fullscreen?\n        fallback: true, // Fallback for vintage browsers\n        iosNative: false, // Use the native fullscreen in iOS (disables custom controls)\n    },\n\n    // Local storage\n    storage: {\n        enabled: true,\n        key: 'plyr',\n    },\n\n    // Default controls\n    controls: [\n        'play-large',\n        // 'restart',\n        // 'rewind',\n        'play',\n        // 'fast-forward',\n        'progress',\n        'current-time',\n        'mute',\n        'volume',\n        'captions',\n        'settings',\n        'pip',\n        'airplay',\n        'fullscreen',\n    ],\n    settings: [\n        'captions',\n        'quality',\n        'speed',\n    ],\n\n    // Localisation\n    i18n: {\n        restart: 'Restart',\n        rewind: 'Rewind {seektime}s',\n        play: 'Play',\n        pause: 'Pause',\n        fastForward: 'Forward {seektime}s',\n        seek: 'Seek',\n        played: 'Played',\n        buffered: 'Buffered',\n        currentTime: 'Current time',\n        duration: 'Duration',\n        volume: 'Volume',\n        mute: 'Mute',\n        unmute: 'Unmute',\n        enableCaptions: 'Enable captions',\n        disableCaptions: 'Disable captions',\n        enterFullscreen: 'Enter fullscreen',\n        exitFullscreen: 'Exit fullscreen',\n        frameTitle: 'Player for {title}',\n        captions: 'Captions',\n        settings: 'Settings',\n        speed: 'Speed',\n        normal: 'Normal',\n        quality: 'Quality',\n        loop: 'Loop',\n        start: 'Start',\n        end: 'End',\n        all: 'All',\n        reset: 'Reset',\n        disabled: 'Disabled',\n        enabled: 'Enabled',\n        advertisement: 'Ad',\n    },\n\n    // URLs\n    urls: {\n        vimeo: {\n            sdk: 'https://player.vimeo.com/api/player.js',\n            iframe: 'https://player.vimeo.com/video/{0}?{1}',\n            api: 'https://vimeo.com/api/v2/video/{0}.json',\n        },\n        youtube: {\n            sdk: 'https://www.youtube.com/iframe_api',\n            api: 'https://www.googleapis.com/youtube/v3/videos?id={0}&key={1}&fields=items(snippet(title))&part=snippet',\n            poster: 'https://img.youtube.com/vi/{0}/maxresdefault.jpg,https://img.youtube.com/vi/{0}/hqdefault.jpg',\n        },\n        googleIMA: {\n            sdk: 'https://imasdk.googleapis.com/js/sdkloader/ima3.js',\n        },\n    },\n\n    // Custom control listeners\n    listeners: {\n        seek: null,\n        play: null,\n        pause: null,\n        restart: null,\n        rewind: null,\n        fastForward: null,\n        mute: null,\n        volume: null,\n        captions: null,\n        fullscreen: null,\n        pip: null,\n        airplay: null,\n        speed: null,\n        quality: null,\n        loop: null,\n        language: null,\n    },\n\n    // Events to watch and bubble\n    events: [\n        // Events to watch on HTML5 media elements and bubble\n        // https://developer.mozilla.org/en/docs/Web/Guide/Events/Media_events\n        'ended',\n        'progress',\n        'stalled',\n        'playing',\n        'waiting',\n        'canplay',\n        'canplaythrough',\n        'loadstart',\n        'loadeddata',\n        'loadedmetadata',\n        'timeupdate',\n        'volumechange',\n        'play',\n        'pause',\n        'error',\n        'seeking',\n        'seeked',\n        'emptied',\n        'ratechange',\n        'cuechange',\n\n        // Custom events\n        'enterfullscreen',\n        'exitfullscreen',\n        'captionsenabled',\n        'captionsdisabled',\n        'languagechange',\n        'controlshidden',\n        'controlsshown',\n        'ready',\n\n        // YouTube\n        'statechange',\n        'qualitychange',\n        'qualityrequested',\n\n        // Ads\n        'adsloaded',\n        'adscontentpause',\n        'adscontentresume',\n        'adstarted',\n        'adsmidpoint',\n        'adscomplete',\n        'adsallcomplete',\n        'adsimpression',\n        'adsclick',\n    ],\n\n    // Selectors\n    // Change these to match your template if using custom HTML\n    selectors: {\n        editable: 'input, textarea, select, [contenteditable]',\n        container: '.plyr',\n        controls: {\n            container: null,\n            wrapper: '.plyr__controls',\n        },\n        labels: '[data-plyr]',\n        buttons: {\n            play: '[data-plyr=\"play\"]',\n            pause: '[data-plyr=\"pause\"]',\n            restart: '[data-plyr=\"restart\"]',\n            rewind: '[data-plyr=\"rewind\"]',\n            fastForward: '[data-plyr=\"fast-forward\"]',\n            mute: '[data-plyr=\"mute\"]',\n            captions: '[data-plyr=\"captions\"]',\n            fullscreen: '[data-plyr=\"fullscreen\"]',\n            pip: '[data-plyr=\"pip\"]',\n            airplay: '[data-plyr=\"airplay\"]',\n            settings: '[data-plyr=\"settings\"]',\n            loop: '[data-plyr=\"loop\"]',\n        },\n        inputs: {\n            seek: '[data-plyr=\"seek\"]',\n            volume: '[data-plyr=\"volume\"]',\n            speed: '[data-plyr=\"speed\"]',\n            language: '[data-plyr=\"language\"]',\n            quality: '[data-plyr=\"quality\"]',\n        },\n        display: {\n            currentTime: '.plyr__time--current',\n            duration: '.plyr__time--duration',\n            buffer: '.plyr__progress--buffer',\n            played: '.plyr__progress--played',\n            loop: '.plyr__progress--loop',\n            volume: '.plyr__volume--display',\n        },\n        progress: '.plyr__progress',\n        captions: '.plyr__captions',\n        menu: {\n            quality: '.js-plyr__menu__list--quality',\n        },\n    },\n\n    // Class hooks added to the player in different states\n    classNames: {\n        type: 'plyr--{0}',\n        provider: 'plyr--{0}',\n        video: 'plyr__video-wrapper',\n        embed: 'plyr__video-embed',\n        embedContainer: 'plyr__video-embed__container',\n        poster: 'plyr__poster',\n        ads: 'plyr__ads',\n        control: 'plyr__control',\n        playing: 'plyr--playing',\n        paused: 'plyr--paused',\n        stopped: 'plyr--stopped',\n        loading: 'plyr--loading',\n        error: 'plyr--has-error',\n        hover: 'plyr--hover',\n        tooltip: 'plyr__tooltip',\n        cues: 'plyr__cues',\n        hidden: 'plyr__sr-only',\n        hideControls: 'plyr--hide-controls',\n        isIos: 'plyr--is-ios',\n        isTouch: 'plyr--is-touch',\n        uiSupported: 'plyr--full-ui',\n        noTransition: 'plyr--no-transition',\n        menu: {\n            value: 'plyr__menu__value',\n            badge: 'plyr__badge',\n            open: 'plyr--menu-open',\n        },\n        captions: {\n            enabled: 'plyr--captions-enabled',\n            active: 'plyr--captions-active',\n        },\n        fullscreen: {\n            enabled: 'plyr--fullscreen-enabled',\n            fallback: 'plyr--fullscreen-fallback',\n        },\n        pip: {\n            supported: 'plyr--pip-supported',\n            active: 'plyr--pip-active',\n        },\n        airplay: {\n            supported: 'plyr--airplay-supported',\n            active: 'plyr--airplay-active',\n        },\n        tabFocus: 'plyr__tab-focus',\n    },\n\n    // Embed attributes\n    attributes: {\n        embed: {\n            provider: 'data-plyr-provider',\n            id: 'data-plyr-embed-id',\n        },\n    },\n\n    // API keys\n    keys: {\n        google: null,\n    },\n\n    // Advertisements plugin\n    // Register for an account here: http://vi.ai/publisher-video-monetization/?aid=plyrio\n    ads: {\n        enabled: false,\n        publisherId: '',\n    },\n};\n\nexport default defaults;\n","// ==========================================================================\n// Fullscreen wrapper\n// https://developer.mozilla.org/en-US/docs/Web/API/Fullscreen_API#prefixing\n// ==========================================================================\n\nimport utils from './utils';\n\nconst browser = utils.getBrowser();\n\nfunction onChange() {\n    if (!this.enabled) {\n        return;\n    }\n\n    // Update toggle button\n    const button = this.player.elements.buttons.fullscreen;\n    if (utils.is.element(button)) {\n        utils.toggleState(button, this.active);\n    }\n\n    // Trigger an event\n    utils.dispatchEvent.call(this.player, this.target, this.active ? 'enterfullscreen' : 'exitfullscreen', true);\n\n    // Trap focus in container\n    if (!browser.isIos) {\n        utils.trapFocus.call(this.player, this.target, this.active);\n    }\n}\n\nfunction toggleFallback(toggle = false) {\n    // Store or restore scroll position\n    if (toggle) {\n        this.scrollPosition = {\n            x: window.scrollX || 0,\n            y: window.scrollY || 0,\n        };\n    } else {\n        window.scrollTo(this.scrollPosition.x, this.scrollPosition.y);\n    }\n\n    // Toggle scroll\n    document.body.style.overflow = toggle ? 'hidden' : '';\n\n    // Toggle class hook\n    utils.toggleClass(this.target, this.player.config.classNames.fullscreen.fallback, toggle);\n\n    // Toggle button and fire events\n    onChange.call(this);\n}\n\nclass Fullscreen {\n    constructor(player) {\n        // Keep reference to parent\n        this.player = player;\n\n        // Get prefix\n        this.prefix = Fullscreen.prefix;\n        this.property = Fullscreen.property;\n\n        // Scroll position\n        this.scrollPosition = { x: 0, y: 0 };\n\n        // Register event listeners\n        // Handle event (incase user presses escape etc)\n        utils.on(document, this.prefix === 'ms' ? 'MSFullscreenChange' : `${this.prefix}fullscreenchange`, () => {\n            // TODO: Filter for target??\n            onChange.call(this);\n        });\n\n        // Fullscreen toggle on double click\n        utils.on(this.player.elements.container, 'dblclick', event => {\n            // Ignore double click in controls\n            if (utils.is.element(this.player.elements.controls) && this.player.elements.controls.contains(event.target)) {\n                return;\n            }\n\n            this.toggle();\n        });\n\n        // Update the UI\n        this.update();\n    }\n\n    // Determine if native supported\n    static get native() {\n        return !!(document.fullscreenEnabled || document.webkitFullscreenEnabled || document.mozFullScreenEnabled || document.msFullscreenEnabled);\n    }\n\n    // Get the prefix for handlers\n    static get prefix() {\n        // No prefix\n        if (utils.is.function(document.exitFullscreen)) {\n            return '';\n        }\n\n        // Check for fullscreen support by vendor prefix\n        let value = '';\n        const prefixes = [\n            'webkit',\n            'moz',\n            'ms',\n        ];\n\n        prefixes.some(pre => {\n            if (utils.is.function(document[`${pre}ExitFullscreen`]) || utils.is.function(document[`${pre}CancelFullScreen`])) {\n                value = pre;\n                return true;\n            }\n\n            return false;\n        });\n\n        return value;\n    }\n\n    static get property() {\n        return this.prefix === 'moz' ? 'FullScreen' : 'Fullscreen';\n    }\n\n    // Determine if fullscreen is enabled\n    get enabled() {\n        return (\n            (Fullscreen.native || this.player.config.fullscreen.fallback) &&\n            this.player.config.fullscreen.enabled &&\n            this.player.supported.ui &&\n            this.player.isVideo\n        );\n    }\n\n    // Get active state\n    get active() {\n        if (!this.enabled) {\n            return false;\n        }\n\n        // Fallback using classname\n        if (!Fullscreen.native) {\n            return utils.hasClass(this.target, this.player.config.classNames.fullscreen.fallback);\n        }\n\n        const element = !this.prefix ? document.fullscreenElement : document[`${this.prefix}${this.property}Element`];\n\n        return element === this.target;\n    }\n\n    // Get target element\n    get target() {\n        return browser.isIos && this.player.config.fullscreen.iosNative ? this.player.media : this.player.elements.container;\n    }\n\n    // Update UI\n    update() {\n        if (this.enabled) {\n            this.player.debug.log(`${Fullscreen.native ? 'Native' : 'Fallback'} fullscreen enabled`);\n        } else {\n            this.player.debug.log('Fullscreen not supported and fallback disabled');\n        }\n\n        // Add styling hook to show button\n        utils.toggleClass(this.player.elements.container, this.player.config.classNames.fullscreen.enabled, this.enabled);\n    }\n\n    // Make an element fullscreen\n    enter() {\n        if (!this.enabled) {\n            return;\n        }\n\n        // iOS native fullscreen doesn't need the request step\n        if (browser.isIos && this.player.config.fullscreen.iosNative) {\n            if (this.player.playing) {\n                this.target.webkitEnterFullscreen();\n            }\n        } else if (!Fullscreen.native) {\n            toggleFallback.call(this, true);\n        } else if (!this.prefix) {\n            this.target.requestFullscreen();\n        } else if (!utils.is.empty(this.prefix)) {\n            this.target[`${this.prefix}Request${this.property}`]();\n        }\n    }\n\n    // Bail from fullscreen\n    exit() {\n        if (!this.enabled) {\n            return;\n        }\n\n        // iOS native fullscreen\n        if (browser.isIos && this.player.config.fullscreen.iosNative) {\n            this.target.webkitExitFullscreen();\n            this.player.play();\n        } else if (!Fullscreen.native) {\n            toggleFallback.call(this, false);\n        } else if (!this.prefix) {\n            (document.cancelFullScreen || document.exitFullscreen).call(document);\n        } else if (!utils.is.empty(this.prefix)) {\n            const action = this.prefix === 'moz' ? 'Cancel' : 'Exit';\n            document[`${this.prefix}${action}${this.property}`]();\n        }\n    }\n\n    // Toggle state\n    toggle() {\n        if (!this.active) {\n            this.enter();\n        } else {\n            this.exit();\n        }\n    }\n}\n\nexport default Fullscreen;\n","// ==========================================================================\n// Plyr Event Listeners\n// ==========================================================================\n\nimport controls from './controls';\nimport ui from './ui';\nimport utils from './utils';\n\n// Sniff out the browser\nconst browser = utils.getBrowser();\n\nclass Listeners {\n    constructor(player) {\n        this.player = player;\n        this.lastKey = null;\n\n        this.handleKey = this.handleKey.bind(this);\n        this.toggleMenu = this.toggleMenu.bind(this);\n        this.firstTouch = this.firstTouch.bind(this);\n    }\n\n    // Handle key presses\n    handleKey(event) {\n        const code = event.keyCode ? event.keyCode : event.which;\n        const pressed = event.type === 'keydown';\n        const repeat = pressed && code === this.lastKey;\n\n        // Bail if a modifier key is set\n        if (event.altKey || event.ctrlKey || event.metaKey || event.shiftKey) {\n            return;\n        }\n\n        // If the event is bubbled from the media element\n        // Firefox doesn't get the keycode for whatever reason\n        if (!utils.is.number(code)) {\n            return;\n        }\n\n        // Seek by the number keys\n        const seekByKey = () => {\n            // Divide the max duration into 10th's and times by the number value\n            this.player.currentTime = this.player.duration / 10 * (code - 48);\n        };\n\n        // Handle the key on keydown\n        // Reset on keyup\n        if (pressed) {\n            // Which keycodes should we prevent default\n            const preventDefault = [\n                48,\n                49,\n                50,\n                51,\n                52,\n                53,\n                54,\n                56,\n                57,\n                32,\n                75,\n                38,\n                40,\n                77,\n                39,\n                37,\n                70,\n                67,\n                73,\n                76,\n                79,\n            ];\n\n            // Check focused element\n            // and if the focused element is not editable (e.g. text input)\n            // and any that accept key input http://webaim.org/techniques/keyboard/\n            const focused = utils.getFocusElement();\n            if (utils.is.element(focused) && utils.matches(focused, this.player.config.selectors.editable)) {\n                return;\n            }\n\n            // If the code is found prevent default (e.g. prevent scrolling for arrows)\n            if (preventDefault.includes(code)) {\n                event.preventDefault();\n                event.stopPropagation();\n            }\n\n            switch (code) {\n                case 48:\n                case 49:\n                case 50:\n                case 51:\n                case 52:\n                case 53:\n                case 54:\n                case 55:\n                case 56:\n                case 57:\n                    // 0-9\n                    if (!repeat) {\n                        seekByKey();\n                    }\n                    break;\n\n                case 32:\n                case 75:\n                    // Space and K key\n                    if (!repeat) {\n                        this.player.togglePlay();\n                    }\n                    break;\n\n                case 38:\n                    // Arrow up\n                    this.player.increaseVolume(0.1);\n                    break;\n\n                case 40:\n                    // Arrow down\n                    this.player.decreaseVolume(0.1);\n                    break;\n\n                case 77:\n                    // M key\n                    if (!repeat) {\n                        this.player.muted = !this.player.muted;\n                    }\n                    break;\n\n                case 39:\n                    // Arrow forward\n                    this.player.forward();\n                    break;\n\n                case 37:\n                    // Arrow back\n                    this.player.rewind();\n                    break;\n\n                case 70:\n                    // F key\n                    this.player.fullscreen.toggle();\n                    break;\n\n                case 67:\n                    // C key\n                    if (!repeat) {\n                        this.player.toggleCaptions();\n                    }\n                    break;\n\n                case 76:\n                    // L key\n                    this.player.loop = !this.player.loop;\n                    break;\n\n                /* case 73:\n                    this.setLoop('start');\n                    break;\n\n                case 76:\n                    this.setLoop();\n                    break;\n\n                case 79:\n                    this.setLoop('end');\n                    break; */\n\n                default:\n                    break;\n            }\n\n            // Escape is handle natively when in full screen\n            // So we only need to worry about non native\n            if (!this.player.fullscreen.enabled && this.player.fullscreen.active && code === 27) {\n                this.player.fullscreen.toggle();\n            }\n\n            // Store last code for next cycle\n            this.lastKey = code;\n        } else {\n            this.lastKey = null;\n        }\n    }\n\n    // Toggle menu\n    toggleMenu(event) {\n        controls.toggleMenu.call(this.player, event);\n    }\n\n    // Device is touch enabled\n    firstTouch() {\n        this.player.touch = true;\n\n        // Add touch class\n        utils.toggleClass(this.player.elements.container, this.player.config.classNames.isTouch, true);\n\n        // Clean up\n        utils.off(document.body, 'touchstart', this.firstTouch);\n    }\n\n    // Global window & document listeners\n    global(toggle = true) {\n        // Keyboard shortcuts\n        if (this.player.config.keyboard.global) {\n            utils.toggleListener(window, 'keydown keyup', this.handleKey, toggle, false);\n        }\n\n        // Click anywhere closes menu\n        utils.toggleListener(document.body, 'click', this.toggleMenu, toggle);\n\n        // Detect touch by events\n        utils.on(document.body, 'touchstart', this.firstTouch);\n    }\n\n    // Container listeners\n    container() {\n        // Keyboard shortcuts\n        if (!this.player.config.keyboard.global && this.player.config.keyboard.focused) {\n            utils.on(this.player.elements.container, 'keydown keyup', this.handleKey, false);\n        }\n\n        // Detect tab focus\n        // Remove class on blur/focusout\n        utils.on(this.player.elements.container, 'focusout', event => {\n            utils.toggleClass(event.target, this.player.config.classNames.tabFocus, false);\n        });\n\n        // Add classname to tabbed elements\n        utils.on(this.player.elements.container, 'keydown', event => {\n            if (event.keyCode !== 9) {\n                return;\n            }\n\n            // Delay the adding of classname until the focus has changed\n            // This event fires before the focusin event\n            setTimeout(() => {\n                utils.toggleClass(utils.getFocusElement(), this.player.config.classNames.tabFocus, true);\n            }, 0);\n        });\n\n        // Toggle controls visibility based on mouse movement\n        if (this.player.config.hideControls) {\n            // Toggle controls on mouse events and entering fullscreen\n            utils.on(this.player.elements.container, 'mouseenter mouseleave mousemove touchstart touchend touchmove enterfullscreen exitfullscreen', event => {\n                this.player.toggleControls(event);\n            });\n        }\n    }\n\n    // Listen for media events\n    media() {\n        // Time change on media\n        utils.on(this.player.media, 'timeupdate seeking', event => ui.timeUpdate.call(this.player, event));\n\n        // Display duration\n        utils.on(this.player.media, 'durationchange loadeddata loadedmetadata', event => ui.durationUpdate.call(this.player, event));\n\n        // Check for audio tracks on load\n        // We can't use `loadedmetadata` as it doesn't seem to have audio tracks at that point\n        utils.on(this.player.media, 'loadeddata', () => {\n            utils.toggleHidden(this.player.elements.volume, !this.player.hasAudio);\n            utils.toggleHidden(this.player.elements.buttons.mute, !this.player.hasAudio);\n        });\n\n        // Handle the media finishing\n        utils.on(this.player.media, 'ended', () => {\n            // Show poster on end\n            if (this.player.isHTML5 && this.player.isVideo && this.player.config.resetOnEnd) {\n                // Restart\n                this.player.restart();\n            }\n        });\n\n        // Check for buffer progress\n        utils.on(this.player.media, 'progress playing', event => ui.updateProgress.call(this.player, event));\n\n        // Handle volume changes\n        utils.on(this.player.media, 'volumechange', event => ui.updateVolume.call(this.player, event));\n\n        // Handle play/pause\n        utils.on(this.player.media, 'playing play pause ended emptied timeupdate', event => ui.checkPlaying.call(this.player, event));\n\n        // Loading state\n        utils.on(this.player.media, 'waiting canplay seeked playing', event => ui.checkLoading.call(this.player, event));\n\n        // Check if media failed to load\n        // utils.on(this.player.media, 'play', event => ui.checkFailed.call(this.player, event));\n\n        // If autoplay, then load advertisement if required\n        // TODO: Show some sort of loading state while the ad manager loads else there's a delay before ad shows\n        utils.on(this.player.media, 'playing', () => {\n            if (!this.player.ads) {\n                return;\n            }\n\n            // If ads are enabled, wait for them first\n            if (this.player.ads.enabled && !this.player.ads.initialized) {\n                // Wait for manager response\n                this.player.ads.managerPromise.then(() => this.player.ads.play()).catch(() => this.player.play());\n            }\n        });\n\n        // Click video\n        if (this.player.supported.ui && this.player.config.clickToPlay && !this.player.isAudio) {\n            // Re-fetch the wrapper\n            const wrapper = utils.getElement.call(this.player, `.${this.player.config.classNames.video}`);\n\n            // Bail if there's no wrapper (this should never happen)\n            if (!utils.is.element(wrapper)) {\n                return;\n            }\n\n            // On click play, pause ore restart\n            utils.on(wrapper, 'click', () => {\n                // Touch devices will just show controls (if we're hiding controls)\n                if (this.player.config.hideControls && this.player.touch && !this.player.paused) {\n                    return;\n                }\n\n                if (this.player.paused) {\n                    this.player.play();\n                } else if (this.player.ended) {\n                    this.player.restart();\n                    this.player.play();\n                } else {\n                    this.player.pause();\n                }\n            });\n        }\n\n        // Disable right click\n        if (this.player.supported.ui && this.player.config.disableContextMenu) {\n            utils.on(\n                this.player.elements.wrapper,\n                'contextmenu',\n                event => {\n                    event.preventDefault();\n                },\n                false,\n            );\n        }\n\n        // Volume change\n        utils.on(this.player.media, 'volumechange', () => {\n            // Save to storage\n            this.player.storage.set({ volume: this.player.volume, muted: this.player.muted });\n        });\n\n        // Speed change\n        utils.on(this.player.media, 'ratechange', () => {\n            // Update UI\n            controls.updateSetting.call(this.player, 'speed');\n\n            // Save to storage\n            this.player.storage.set({ speed: this.player.speed });\n        });\n\n        // Quality request\n        utils.on(this.player.media, 'qualityrequested', event => {\n            // Save to storage\n            this.player.storage.set({ quality: event.detail.quality });\n        });\n\n        // Quality change\n        utils.on(this.player.media, 'qualitychange', event => {\n            // Update UI\n            controls.updateSetting.call(this.player, 'quality', null, event.detail.quality);\n        });\n\n        // Caption language change\n        utils.on(this.player.media, 'languagechange', () => {\n            // Update UI\n            controls.updateSetting.call(this.player, 'captions');\n\n            // Save to storage\n            this.player.storage.set({ language: this.player.language });\n        });\n\n        // Captions toggle\n        utils.on(this.player.media, 'captionsenabled captionsdisabled', () => {\n            // Update UI\n            controls.updateSetting.call(this.player, 'captions');\n\n            // Save to storage\n            this.player.storage.set({ captions: this.player.captions.active });\n        });\n\n        // Proxy events to container\n        // Bubble up key events for Edge\n        utils.on(this.player.media, this.player.config.events.concat([\n            'keyup',\n            'keydown',\n        ]).join(' '), event => {\n            let detail = {};\n\n            // Get error details from media\n            if (event.type === 'error') {\n                detail = this.player.media.error;\n            }\n\n            utils.dispatchEvent.call(this.player, this.player.elements.container, event.type, true, detail);\n        });\n    }\n\n    // Listen for control events\n    controls() {\n        // IE doesn't support input event, so we fallback to change\n        const inputEvent = browser.isIE ? 'change' : 'input';\n\n        // Run default and custom handlers\n        const proxy = (event, defaultHandler, customHandlerKey) => {\n            const customHandler = this.player.config.listeners[customHandlerKey];\n            const hasCustomHandler = utils.is.function(customHandler);\n            let returned = true;\n\n            // Execute custom handler\n            if (hasCustomHandler) {\n                returned = customHandler.call(this.player, event);\n            }\n\n            // Only call default handler if not prevented in custom handler\n            if (returned && utils.is.function(defaultHandler)) {\n                defaultHandler.call(this.player, event);\n            }\n        };\n\n        // Trigger custom and default handlers\n        const on = (element, type, defaultHandler, customHandlerKey, passive = true) => {\n            const customHandler = this.player.config.listeners[customHandlerKey];\n            const hasCustomHandler = utils.is.function(customHandler);\n\n            utils.on(element, type, event => proxy(event, defaultHandler, customHandlerKey), passive && !hasCustomHandler);\n        };\n\n        // Play/pause toggle\n        on(this.player.elements.buttons.play, 'click', this.player.togglePlay, 'play');\n\n        // Pause\n        on(this.player.elements.buttons.restart, 'click', this.player.restart, 'restart');\n\n        // Rewind\n        on(this.player.elements.buttons.rewind, 'click', this.player.rewind, 'rewind');\n\n        // Rewind\n        on(this.player.elements.buttons.fastForward, 'click', this.player.forward, 'fastForward');\n\n        // Mute toggle\n        on(\n            this.player.elements.buttons.mute,\n            'click',\n            () => {\n                this.player.muted = !this.player.muted;\n            },\n            'mute',\n        );\n\n        // Captions toggle\n        on(this.player.elements.buttons.captions, 'click', this.player.toggleCaptions);\n\n        // Fullscreen toggle\n        on(\n            this.player.elements.buttons.fullscreen,\n            'click',\n            () => {\n                this.player.fullscreen.toggle();\n            },\n            'fullscreen',\n        );\n\n        // Picture-in-Picture\n        on(\n            this.player.elements.buttons.pip,\n            'click',\n            () => {\n                this.player.pip = 'toggle';\n            },\n            'pip',\n        );\n\n        // Airplay\n        on(this.player.elements.buttons.airplay, 'click', this.player.airplay, 'airplay');\n\n        // Settings menu\n        on(this.player.elements.buttons.settings, 'click', event => {\n            controls.toggleMenu.call(this.player, event);\n        });\n\n        // Settings menu\n        on(this.player.elements.settings.form, 'click', event => {\n            event.stopPropagation();\n\n            // Go back to home tab on click\n            const showHomeTab = () => {\n                const id = `plyr-settings-${this.player.id}-home`;\n                controls.showTab.call(this.player, id);\n            };\n\n            // Settings menu items - use event delegation as items are added/removed\n            if (utils.matches(event.target, this.player.config.selectors.inputs.language)) {\n                proxy(\n                    event,\n                    () => {\n                        this.player.language = event.target.value;\n                        showHomeTab();\n                    },\n                    'language',\n                );\n            } else if (utils.matches(event.target, this.player.config.selectors.inputs.quality)) {\n                proxy(\n                    event,\n                    () => {\n                        this.player.quality = event.target.value;\n                        showHomeTab();\n                    },\n                    'quality',\n                );\n            } else if (utils.matches(event.target, this.player.config.selectors.inputs.speed)) {\n                proxy(\n                    event,\n                    () => {\n                        this.player.speed = parseFloat(event.target.value);\n                        showHomeTab();\n                    },\n                    'speed',\n                );\n            } else {\n                const tab = event.target;\n                controls.showTab.call(this.player, tab.getAttribute('aria-controls'));\n            }\n        });\n\n        // Seek\n        on(\n            this.player.elements.inputs.seek,\n            inputEvent,\n            event => {\n                this.player.currentTime = event.target.value / event.target.max * this.player.duration;\n            },\n            'seek',\n        );\n\n        // Current time invert\n        // Only if one time element is used for both currentTime and duration\n        if (this.player.config.toggleInvert && !utils.is.element(this.player.elements.display.duration)) {\n            on(this.player.elements.display.currentTime, 'click', () => {\n                // Do nothing if we're at the start\n                if (this.player.currentTime === 0) {\n                    return;\n                }\n\n                this.player.config.invertTime = !this.player.config.invertTime;\n                ui.timeUpdate.call(this.player);\n            });\n        }\n\n        // Volume\n        on(\n            this.player.elements.inputs.volume,\n            inputEvent,\n            event => {\n                this.player.volume = event.target.value;\n            },\n            'volume',\n        );\n\n        // Polyfill for lower fill in <input type=\"range\"> for webkit\n        if (browser.isWebkit) {\n            on(utils.getElements.call(this.player, 'input[type=\"range\"]'), 'input', event => {\n                controls.updateRangeFill.call(this.player, event.target);\n            });\n        }\n\n        // Seek tooltip\n        on(this.player.elements.progress, 'mouseenter mouseleave mousemove', event => controls.updateSeekTooltip.call(this.player, event));\n\n        // Toggle controls visibility based on mouse movement\n        if (this.player.config.hideControls) {\n            // Watch for cursor over controls so they don't hide when trying to interact\n            on(this.player.elements.controls, 'mouseenter mouseleave', event => {\n                this.player.elements.controls.hover = !this.player.touch && event.type === 'mouseenter';\n            });\n\n            // Watch for cursor over controls so they don't hide when trying to interact\n            on(this.player.elements.controls, 'mousedown mouseup touchstart touchend touchcancel', event => {\n                this.player.elements.controls.pressed = [\n                    'mousedown',\n                    'touchstart',\n                ].includes(event.type);\n            });\n\n            // Focus in/out on controls\n            on(this.player.elements.controls, 'focusin focusout', event => {\n                this.player.toggleControls(event);\n            });\n        }\n\n        // Mouse wheel for volume\n        on(\n            this.player.elements.inputs.volume,\n            'wheel',\n            event => {\n                // Detect \"natural\" scroll - suppored on OS X Safari only\n                // Other browsers on OS X will be inverted until support improves\n                const inverted = event.webkitDirectionInvertedFromDevice;\n                const step = 1 / 50;\n                let direction = 0;\n\n                // Scroll down (or up on natural) to decrease\n                if (event.deltaY < 0 || event.deltaX > 0) {\n                    if (inverted) {\n                        this.player.decreaseVolume(step);\n                        direction = -1;\n                    } else {\n                        this.player.increaseVolume(step);\n                        direction = 1;\n                    }\n                }\n\n                // Scroll up (or down on natural) to increase\n                if (event.deltaY > 0 || event.deltaX < 0) {\n                    if (inverted) {\n                        this.player.increaseVolume(step);\n                        direction = 1;\n                    } else {\n                        this.player.decreaseVolume(step);\n                        direction = -1;\n                    }\n                }\n\n                // Don't break page scrolling at max and min\n                if ((direction === 1 && this.player.media.volume < 1) || (direction === -1 && this.player.media.volume > 0)) {\n                    event.preventDefault();\n                }\n            },\n            'volume',\n            false,\n        );\n    }\n\n    // Reset on destroy\n    clear() {\n        this.global(false);\n    }\n}\n\nexport default Listeners;\n","// ==========================================================================\n// Vimeo plugin\n// ==========================================================================\n\nimport captions from './../captions';\nimport controls from './../controls';\nimport ui from './../ui';\nimport utils from './../utils';\n\nconst vimeo = {\n    setup() {\n        // Add embed class for responsive\n        utils.toggleClass(this.elements.wrapper, this.config.classNames.embed, true);\n\n        // Set intial ratio\n        vimeo.setAspectRatio.call(this);\n\n        // Load the API if not already\n        if (!utils.is.object(window.Vimeo)) {\n            utils\n                .loadScript(this.config.urls.vimeo.sdk)\n                .then(() => {\n                    vimeo.ready.call(this);\n                })\n                .catch(error => {\n                    this.debug.warn('Vimeo API failed to load', error);\n                });\n        } else {\n            vimeo.ready.call(this);\n        }\n    },\n\n    // Set aspect ratio\n    // For Vimeo we have an extra 300% height <div> to hide the standard controls and UI\n    setAspectRatio(input) {\n        const ratio = utils.is.string(input) ? input.split(':') : this.config.ratio.split(':');\n        const padding = 100 / ratio[0] * ratio[1];\n        this.elements.wrapper.style.paddingBottom = `${padding}%`;\n\n        if (this.supported.ui) {\n            const height = 240;\n            const offset = (height - padding) / (height / 50);\n\n            this.media.style.transform = `translateY(-${offset}%)`;\n        }\n    },\n\n    // API Ready\n    ready() {\n        const player = this;\n\n        // Get Vimeo params for the iframe\n        const options = {\n            loop: player.config.loop.active,\n            autoplay: player.autoplay,\n            // muted: player.muted,\n            byline: false,\n            portrait: false,\n            title: false,\n            speed: true,\n            transparent: 0,\n            gesture: 'media',\n            playsinline: !this.config.fullscreen.iosNative,\n        };\n        const params = utils.buildUrlParams(options);\n\n        // Get the source URL or ID\n        let source = player.media.getAttribute('src');\n\n        // Get from <div> if needed\n        if (utils.is.empty(source)) {\n            source = player.media.getAttribute(player.config.attributes.embed.id);\n        }\n\n        const id = utils.parseVimeoId(source);\n\n        // Build an iframe\n        const iframe = utils.createElement('iframe');\n        const src = utils.format(player.config.urls.vimeo.iframe, id, params);\n        iframe.setAttribute('src', src);\n        iframe.setAttribute('allowfullscreen', '');\n        iframe.setAttribute('allowtransparency', '');\n        iframe.setAttribute('allow', 'autoplay');\n\n        // Inject the package\n        const wrapper = utils.createElement('div', { class: player.config.classNames.embedContainer });\n        wrapper.appendChild(iframe);\n        player.media = utils.replaceElement(wrapper, player.media);\n\n        // Get poster image\n        utils.fetch(utils.format(player.config.urls.vimeo.api, id), 'json').then(response => {\n            if (utils.is.empty(response)) {\n                return;\n            }\n\n            // Get the URL for thumbnail\n            const url = new URL(response[0].thumbnail_large);\n\n            // Get original image\n            url.pathname = `${url.pathname.split('_')[0]}.jpg`;\n\n            // Set attribute\n            player.media.setAttribute('poster', url.href);\n\n            // Update\n            ui.setPoster.call(player);\n        });\n\n        // Setup instance\n        // https://github.com/vimeo/player.js\n        player.embed = new window.Vimeo.Player(iframe, {\n            autopause: player.config.autopause,\n            muted: player.muted,\n        });\n\n        player.media.paused = true;\n        player.media.currentTime = 0;\n\n        // Disable native text track rendering\n        if (player.supported.ui) {\n            player.embed.disableTextTrack();\n        }\n\n        // Create a faux HTML5 API using the Vimeo API\n        player.media.play = () => {\n            player.embed.play().then(() => {\n                player.media.paused = false;\n            });\n        };\n\n        player.media.pause = () => {\n            player.embed.pause().then(() => {\n                player.media.paused = true;\n            });\n        };\n\n        player.media.stop = () => {\n            player.pause();\n            player.currentTime = 0;\n        };\n\n        // Seeking\n        let { currentTime } = player.media;\n        Object.defineProperty(player.media, 'currentTime', {\n            get() {\n                return currentTime;\n            },\n            set(time) {\n                // Get current paused state\n                // Vimeo will automatically play on seek\n                const { paused } = player.media;\n\n                // Set seeking flag\n                player.media.seeking = true;\n\n                // Trigger seeking\n                utils.dispatchEvent.call(player, player.media, 'seeking');\n\n                // Seek after events\n                player.embed.setCurrentTime(time).catch(() => {\n                    // Do nothing\n                });\n\n                // Restore pause state\n                if (paused) {\n                    player.pause();\n                }\n            },\n        });\n\n        // Playback speed\n        let speed = player.config.speed.selected;\n        Object.defineProperty(player.media, 'playbackRate', {\n            get() {\n                return speed;\n            },\n            set(input) {\n                player.embed\n                    .setPlaybackRate(input)\n                    .then(() => {\n                        speed = input;\n                        utils.dispatchEvent.call(player, player.media, 'ratechange');\n                    })\n                    .catch(error => {\n                        // Hide menu item (and menu if empty)\n                        if (error.name === 'Error') {\n                            controls.setSpeedMenu.call(player, []);\n                        }\n                    });\n            },\n        });\n\n        // Volume\n        let { volume } = player.config;\n        Object.defineProperty(player.media, 'volume', {\n            get() {\n                return volume;\n            },\n            set(input) {\n                player.embed.setVolume(input).then(() => {\n                    volume = input;\n                    utils.dispatchEvent.call(player, player.media, 'volumechange');\n                });\n            },\n        });\n\n        // Muted\n        let { muted } = player.config;\n        Object.defineProperty(player.media, 'muted', {\n            get() {\n                return muted;\n            },\n            set(input) {\n                const toggle = utils.is.boolean(input) ? input : false;\n\n                player.embed.setVolume(toggle ? 0 : player.config.volume).then(() => {\n                    muted = toggle;\n                    utils.dispatchEvent.call(player, player.media, 'volumechange');\n                });\n            },\n        });\n\n        // Loop\n        let { loop } = player.config;\n        Object.defineProperty(player.media, 'loop', {\n            get() {\n                return loop;\n            },\n            set(input) {\n                const toggle = utils.is.boolean(input) ? input : player.config.loop.active;\n\n                player.embed.setLoop(toggle).then(() => {\n                    loop = toggle;\n                });\n            },\n        });\n\n        // Source\n        let currentSrc;\n        player.embed\n            .getVideoUrl()\n            .then(value => {\n                currentSrc = value;\n            })\n            .catch(error => {\n                this.debug.warn(error);\n            });\n\n        Object.defineProperty(player.media, 'currentSrc', {\n            get() {\n                return currentSrc;\n            },\n        });\n\n        // Ended\n        Object.defineProperty(player.media, 'ended', {\n            get() {\n                return player.currentTime === player.duration;\n            },\n        });\n\n        // Set aspect ratio based on video size\n        Promise.all([\n            player.embed.getVideoWidth(),\n            player.embed.getVideoHeight(),\n        ]).then(dimensions => {\n            const ratio = utils.getAspectRatio(dimensions[0], dimensions[1]);\n            vimeo.setAspectRatio.call(this, ratio);\n        });\n\n        // Set autopause\n        player.embed.setAutopause(player.config.autopause).then(state => {\n            player.config.autopause = state;\n        });\n\n        // Get title\n        player.embed.getVideoTitle().then(title => {\n            player.config.title = title;\n            ui.setTitle.call(this);\n        });\n\n        // Get current time\n        player.embed.getCurrentTime().then(value => {\n            currentTime = value;\n            utils.dispatchEvent.call(player, player.media, 'timeupdate');\n        });\n\n        // Get duration\n        player.embed.getDuration().then(value => {\n            player.media.duration = value;\n            utils.dispatchEvent.call(player, player.media, 'durationchange');\n        });\n\n        // Get captions\n        player.embed.getTextTracks().then(tracks => {\n            player.media.textTracks = tracks;\n            captions.setup.call(player);\n        });\n\n        player.embed.on('cuechange', data => {\n            let cue = null;\n\n            if (data.cues.length) {\n                cue = utils.stripHTML(data.cues[0].text);\n            }\n\n            captions.setText.call(player, cue);\n        });\n\n        player.embed.on('loaded', () => {\n            if (utils.is.element(player.embed.element) && player.supported.ui) {\n                const frame = player.embed.element;\n\n                // Fix keyboard focus issues\n                // https://github.com/sampotts/plyr/issues/317\n                frame.setAttribute('tabindex', -1);\n            }\n        });\n\n        player.embed.on('play', () => {\n            // Only fire play if paused before\n            if (player.media.paused) {\n                utils.dispatchEvent.call(player, player.media, 'play');\n            }\n            player.media.paused = false;\n            utils.dispatchEvent.call(player, player.media, 'playing');\n        });\n\n        player.embed.on('pause', () => {\n            player.media.paused = true;\n            utils.dispatchEvent.call(player, player.media, 'pause');\n        });\n\n        player.embed.on('timeupdate', data => {\n            player.media.seeking = false;\n            currentTime = data.seconds;\n            utils.dispatchEvent.call(player, player.media, 'timeupdate');\n        });\n\n        player.embed.on('progress', data => {\n            player.media.buffered = data.percent;\n            utils.dispatchEvent.call(player, player.media, 'progress');\n\n            // Check all loaded\n            if (parseInt(data.percent, 10) === 1) {\n                utils.dispatchEvent.call(player, player.media, 'canplaythrough');\n            }\n\n            // Get duration as if we do it before load, it gives an incorrect value\n            // https://github.com/sampotts/plyr/issues/891\n            player.embed.getDuration().then(value => {\n                if (value !== player.media.duration) {\n                    player.media.duration = value;\n                    utils.dispatchEvent.call(player, player.media, 'durationchange');\n                }\n            });\n        });\n\n        player.embed.on('seeked', () => {\n            player.media.seeking = false;\n            utils.dispatchEvent.call(player, player.media, 'seeked');\n            utils.dispatchEvent.call(player, player.media, 'play');\n        });\n\n        player.embed.on('ended', () => {\n            player.media.paused = true;\n            utils.dispatchEvent.call(player, player.media, 'ended');\n        });\n\n        player.embed.on('error', detail => {\n            player.media.error = detail;\n            utils.dispatchEvent.call(player, player.media, 'error');\n        });\n\n        // Rebuild UI\n        setTimeout(() => ui.build.call(player), 0);\n    },\n};\n\nexport default vimeo;\n","// ==========================================================================\n// YouTube plugin\n// ==========================================================================\n\nimport controls from './../controls';\nimport ui from './../ui';\nimport utils from './../utils';\n\n// Standardise YouTube quality unit\nfunction mapQualityUnit(input) {\n    switch (input) {\n        case 'hd2160':\n            return 2160;\n\n        case 2160:\n            return 'hd2160';\n\n        case 'hd1440':\n            return 1440;\n\n        case 1440:\n            return 'hd1440';\n\n        case 'hd1080':\n            return 1080;\n\n        case 1080:\n            return 'hd1080';\n\n        case 'hd720':\n            return 720;\n\n        case 720:\n            return 'hd720';\n\n        case 'large':\n            return 480;\n\n        case 480:\n            return 'large';\n\n        case 'medium':\n            return 360;\n\n        case 360:\n            return 'medium';\n\n        case 'small':\n            return 240;\n\n        case 240:\n            return 'small';\n\n        default:\n            return 'default';\n    }\n}\n\nfunction mapQualityUnits(levels) {\n    if (utils.is.empty(levels)) {\n        return levels;\n    }\n\n    return utils.dedupe(levels.map(level => mapQualityUnit(level)));\n}\n\nconst youtube = {\n    setup() {\n        // Add embed class for responsive\n        utils.toggleClass(this.elements.wrapper, this.config.classNames.embed, true);\n\n        // Set aspect ratio\n        youtube.setAspectRatio.call(this);\n\n        // Setup API\n        if (utils.is.object(window.YT) && utils.is.function(window.YT.Player)) {\n            youtube.ready.call(this);\n        } else {\n            // Load the API\n            utils.loadScript(this.config.urls.youtube.sdk).catch(error => {\n                this.debug.warn('YouTube API failed to load', error);\n            });\n\n            // Setup callback for the API\n            // YouTube has it's own system of course...\n            window.onYouTubeReadyCallbacks = window.onYouTubeReadyCallbacks || [];\n\n            // Add to queue\n            window.onYouTubeReadyCallbacks.push(() => {\n                youtube.ready.call(this);\n            });\n\n            // Set callback to process queue\n            window.onYouTubeIframeAPIReady = () => {\n                window.onYouTubeReadyCallbacks.forEach(callback => {\n                    callback();\n                });\n            };\n        }\n    },\n\n    // Get the media title\n    getTitle(videoId) {\n        // Try via undocumented API method first\n        // This method disappears now and then though...\n        // https://github.com/sampotts/plyr/issues/709\n        if (utils.is.function(this.embed.getVideoData)) {\n            const { title } = this.embed.getVideoData();\n\n            if (utils.is.empty(title)) {\n                this.config.title = title;\n                ui.setTitle.call(this);\n                return;\n            }\n        }\n\n        // Or via Google API\n        const key = this.config.keys.google;\n        if (utils.is.string(key) && !utils.is.empty(key)) {\n            const url = utils.format(this.config.urls.youtube.api, videoId, key);\n\n            utils\n                .fetch(url)\n                .then(result => {\n                    if (utils.is.object(result)) {\n                        this.config.title = result.items[0].snippet.title;\n                        ui.setTitle.call(this);\n                    }\n                })\n                .catch(() => {});\n        }\n    },\n\n    // Set aspect ratio\n    setAspectRatio() {\n        const ratio = this.config.ratio.split(':');\n        this.elements.wrapper.style.paddingBottom = `${100 / ratio[0] * ratio[1]}%`;\n    },\n\n    // API ready\n    ready() {\n        const player = this;\n\n        // Ignore already setup (race condition)\n        const currentId = player.media.getAttribute('id');\n        if (!utils.is.empty(currentId) && currentId.startsWith('youtube-')) {\n            return;\n        }\n\n        // Get the source URL or ID\n        let source = player.media.getAttribute('src');\n\n        // Get from <div> if needed\n        if (utils.is.empty(source)) {\n            source = player.media.getAttribute(this.config.attributes.embed.id);\n        }\n\n        // Replace the <iframe> with a <div> due to YouTube API issues\n        const videoId = utils.parseYouTubeId(source);\n        const id = utils.generateId(player.provider);\n        const container = utils.createElement('div', { id });\n        player.media = utils.replaceElement(container, player.media);\n\n        // Set poster image\n        player.media.setAttribute('poster', utils.format(player.config.urls.youtube.poster, videoId));\n\n        // Setup instance\n        // https://developers.google.com/youtube/iframe_api_reference\n        player.embed = new window.YT.Player(id, {\n            videoId,\n            playerVars: {\n                autoplay: player.config.autoplay ? 1 : 0, // Autoplay\n                controls: player.supported.ui ? 0 : 1, // Only show controls if not fully supported\n                rel: 0, // No related vids\n                showinfo: 0, // Hide info\n                iv_load_policy: 3, // Hide annotations\n                modestbranding: 1, // Hide logos as much as possible (they still show one in the corner when paused)\n                disablekb: 1, // Disable keyboard as we handle it\n                playsinline: 1, // Allow iOS inline playback\n\n                // Tracking for stats\n                // origin: window ? `${window.location.protocol}//${window.location.host}` : null,\n                widget_referrer: window ? window.location.href : null,\n\n                // Captions are flaky on YouTube\n                cc_load_policy: player.captions.active ? 1 : 0,\n                cc_lang_pref: player.config.captions.language,\n            },\n            events: {\n                onError(event) {\n                    // If we've already fired an error, don't do it again\n                    // YouTube fires onError twice\n                    if (utils.is.object(player.media.error)) {\n                        return;\n                    }\n\n                    const detail = {\n                        code: event.data,\n                    };\n\n                    // Messages copied from https://developers.google.com/youtube/iframe_api_reference#onError\n                    switch (event.data) {\n                        case 2:\n                            detail.message =\n                                'The request contains an invalid parameter value. For example, this error occurs if you specify a video ID that does not have 11 characters, or if the video ID contains invalid characters, such as exclamation points or asterisks.';\n                            break;\n\n                        case 5:\n                            detail.message =\n                                'The requested content cannot be played in an HTML5 player or another error related to the HTML5 player has occurred.';\n                            break;\n\n                        case 100:\n                            detail.message =\n                                'The video requested was not found. This error occurs when a video has been removed (for any reason) or has been marked as private.';\n                            break;\n\n                        case 101:\n                        case 150:\n                            detail.message = 'The owner of the requested video does not allow it to be played in embedded players.';\n                            break;\n\n                        default:\n                            detail.message = 'An unknown error occured';\n                            break;\n                    }\n\n                    player.media.error = detail;\n\n                    utils.dispatchEvent.call(player, player.media, 'error');\n                },\n                onPlaybackQualityChange() {\n                    utils.dispatchEvent.call(player, player.media, 'qualitychange', false, {\n                        quality: player.media.quality,\n                    });\n                },\n                onPlaybackRateChange(event) {\n                    // Get the instance\n                    const instance = event.target;\n\n                    // Get current speed\n                    player.media.playbackRate = instance.getPlaybackRate();\n\n                    utils.dispatchEvent.call(player, player.media, 'ratechange');\n                },\n                onReady(event) {\n                    // Get the instance\n                    const instance = event.target;\n\n                    // Get the title\n                    youtube.getTitle.call(player, videoId);\n\n                    // Create a faux HTML5 API using the YouTube API\n                    player.media.play = () => {\n                        instance.playVideo();\n                    };\n\n                    player.media.pause = () => {\n                        instance.pauseVideo();\n                    };\n\n                    player.media.stop = () => {\n                        instance.stopVideo();\n                    };\n\n                    player.media.duration = instance.getDuration();\n                    player.media.paused = true;\n\n                    // Seeking\n                    player.media.currentTime = 0;\n                    Object.defineProperty(player.media, 'currentTime', {\n                        get() {\n                            return Number(instance.getCurrentTime());\n                        },\n                        set(time) {\n                            // Vimeo will automatically play on seek\n                            const { paused } = player.media;\n\n                            // Set seeking flag\n                            player.media.seeking = true;\n\n                            // Trigger seeking\n                            utils.dispatchEvent.call(player, player.media, 'seeking');\n\n                            // Seek after events sent\n                            instance.seekTo(time);\n\n                            // Restore pause state\n                            if (paused) {\n                                player.pause();\n                            }\n                        },\n                    });\n\n                    // Playback speed\n                    Object.defineProperty(player.media, 'playbackRate', {\n                        get() {\n                            return instance.getPlaybackRate();\n                        },\n                        set(input) {\n                            instance.setPlaybackRate(input);\n                        },\n                    });\n\n                    // Quality\n                    Object.defineProperty(player.media, 'quality', {\n                        get() {\n                            return mapQualityUnit(instance.getPlaybackQuality());\n                        },\n                        set(input) {\n                            const quality = input;\n\n                            // Set via API\n                            instance.setPlaybackQuality(mapQualityUnit(quality));\n\n                            // Trigger request event\n                            utils.dispatchEvent.call(player, player.media, 'qualityrequested', false, {\n                                quality,\n                            });\n                        },\n                    });\n\n                    // Volume\n                    let { volume } = player.config;\n                    Object.defineProperty(player.media, 'volume', {\n                        get() {\n                            return volume;\n                        },\n                        set(input) {\n                            volume = input;\n                            instance.setVolume(volume * 100);\n                            utils.dispatchEvent.call(player, player.media, 'volumechange');\n                        },\n                    });\n\n                    // Muted\n                    let { muted } = player.config;\n                    Object.defineProperty(player.media, 'muted', {\n                        get() {\n                            return muted;\n                        },\n                        set(input) {\n                            const toggle = utils.is.boolean(input) ? input : muted;\n                            muted = toggle;\n                            instance[toggle ? 'mute' : 'unMute']();\n                            utils.dispatchEvent.call(player, player.media, 'volumechange');\n                        },\n                    });\n\n                    // Source\n                    Object.defineProperty(player.media, 'currentSrc', {\n                        get() {\n                            return instance.getVideoUrl();\n                        },\n                    });\n\n                    // Ended\n                    Object.defineProperty(player.media, 'ended', {\n                        get() {\n                            return player.currentTime === player.duration;\n                        },\n                    });\n\n                    // Get available speeds\n                    player.options.speed = instance.getAvailablePlaybackRates();\n\n                    // Set the tabindex to avoid focus entering iframe\n                    if (player.supported.ui) {\n                        player.media.setAttribute('tabindex', -1);\n                    }\n\n                    utils.dispatchEvent.call(player, player.media, 'timeupdate');\n                    utils.dispatchEvent.call(player, player.media, 'durationchange');\n\n                    // Reset timer\n                    clearInterval(player.timers.buffering);\n\n                    // Setup buffering\n                    player.timers.buffering = setInterval(() => {\n                        // Get loaded % from YouTube\n                        player.media.buffered = instance.getVideoLoadedFraction();\n\n                        // Trigger progress only when we actually buffer something\n                        if (player.media.lastBuffered === null || player.media.lastBuffered < player.media.buffered) {\n                            utils.dispatchEvent.call(player, player.media, 'progress');\n                        }\n\n                        // Set last buffer point\n                        player.media.lastBuffered = player.media.buffered;\n\n                        // Bail if we're at 100%\n                        if (player.media.buffered === 1) {\n                            clearInterval(player.timers.buffering);\n\n                            // Trigger event\n                            utils.dispatchEvent.call(player, player.media, 'canplaythrough');\n                        }\n                    }, 200);\n\n                    // Rebuild UI\n                    setTimeout(() => ui.build.call(player), 50);\n                },\n                onStateChange(event) {\n                    // Get the instance\n                    const instance = event.target;\n\n                    // Reset timer\n                    clearInterval(player.timers.playing);\n\n                    // Handle events\n                    // -1   Unstarted\n                    // 0    Ended\n                    // 1    Playing\n                    // 2    Paused\n                    // 3    Buffering\n                    // 5    Video cued\n                    switch (event.data) {\n                        case -1:\n                            // Update scrubber\n                            utils.dispatchEvent.call(player, player.media, 'timeupdate');\n\n                            // Get loaded % from YouTube\n                            player.media.buffered = instance.getVideoLoadedFraction();\n                            utils.dispatchEvent.call(player, player.media, 'progress');\n\n                            break;\n\n                        case 0:\n                            player.media.paused = true;\n\n                            // YouTube doesn't support loop for a single video, so mimick it.\n                            if (player.media.loop) {\n                                // YouTube needs a call to `stopVideo` before playing again\n                                instance.stopVideo();\n                                instance.playVideo();\n                            } else {\n                                utils.dispatchEvent.call(player, player.media, 'ended');\n                            }\n\n                            break;\n\n                        case 1:\n                            // If we were seeking, fire seeked event\n                            if (player.media.seeking) {\n                                utils.dispatchEvent.call(player, player.media, 'seeked');\n                            }\n                            player.media.seeking = false;\n\n                            // Only fire play if paused before\n                            if (player.media.paused) {\n                                utils.dispatchEvent.call(player, player.media, 'play');\n                            }\n                            player.media.paused = false;\n\n                            utils.dispatchEvent.call(player, player.media, 'playing');\n\n                            // Poll to get playback progress\n                            player.timers.playing = setInterval(() => {\n                                utils.dispatchEvent.call(player, player.media, 'timeupdate');\n                            }, 50);\n\n                            // Check duration again due to YouTube bug\n                            // https://github.com/sampotts/plyr/issues/374\n                            // https://code.google.com/p/gdata-issues/issues/detail?id=8690\n                            if (player.media.duration !== instance.getDuration()) {\n                                player.media.duration = instance.getDuration();\n                                utils.dispatchEvent.call(player, player.media, 'durationchange');\n                            }\n\n                            // Get quality\n                            controls.setQualityMenu.call(player, mapQualityUnits(instance.getAvailableQualityLevels()));\n\n                            break;\n\n                        case 2:\n                            player.media.paused = true;\n\n                            utils.dispatchEvent.call(player, player.media, 'pause');\n\n                            break;\n\n                        default:\n                            break;\n                    }\n\n                    utils.dispatchEvent.call(player, player.elements.container, 'statechange', false, {\n                        code: event.data,\n                    });\n                },\n            },\n        });\n    },\n};\n\nexport default youtube;\n","// ==========================================================================\n// Plyr Media\n// ==========================================================================\n\nimport html5 from './html5';\nimport vimeo from './plugins/vimeo';\nimport youtube from './plugins/youtube';\nimport utils from './utils';\n\nconst media = {\n    // Setup media\n    setup() {\n        // If there's no media, bail\n        if (!this.media) {\n            this.debug.warn('No media element found!');\n            return;\n        }\n\n        // Add type class\n        utils.toggleClass(this.elements.container, this.config.classNames.type.replace('{0}', this.type), true);\n\n        // Add provider class\n        utils.toggleClass(this.elements.container, this.config.classNames.provider.replace('{0}', this.provider), true);\n\n        // Add video class for embeds\n        // This will require changes if audio embeds are added\n        if (this.isEmbed) {\n            utils.toggleClass(this.elements.container, this.config.classNames.type.replace('{0}', 'video'), true);\n        }\n\n        // Inject the player wrapper\n        if (this.isVideo) {\n            // Create the wrapper div\n            this.elements.wrapper = utils.createElement('div', {\n                class: this.config.classNames.video,\n            });\n\n            // Wrap the video in a container\n            utils.wrap(this.media, this.elements.wrapper);\n\n            // Faux poster container\n            this.elements.poster = utils.createElement('div', {\n                class: this.config.classNames.poster,\n            });\n\n            this.elements.wrapper.appendChild(this.elements.poster);\n        }\n\n        if (this.isEmbed) {\n            switch (this.provider) {\n                case 'youtube':\n                    youtube.setup.call(this);\n                    break;\n\n                case 'vimeo':\n                    vimeo.setup.call(this);\n                    break;\n\n                default:\n                    break;\n            }\n        } else if (this.isHTML5) {\n            html5.extend.call(this);\n        }\n    },\n};\n\nexport default media;\n","// ==========================================================================\n// Advertisement plugin using Google IMA HTML5 SDK\n// Create an account with our ad partner, vi here:\n// https://www.vi.ai/publisher-video-monetization/\n// ==========================================================================\n\n/* global google */\n\nimport i18n from '../i18n';\nimport utils from '../utils';\n\nclass Ads {\n    /**\n     * Ads constructor.\n     * @param {object} player\n     * @return {Ads}\n     */\n    constructor(player) {\n        this.player = player;\n        this.publisherId = player.config.ads.publisherId;\n        this.playing = false;\n        this.initialized = false;\n        this.elements = {\n            container: null,\n            displayContainer: null,\n        };\n        this.manager = null;\n        this.loader = null;\n        this.cuePoints = null;\n        this.events = {};\n        this.safetyTimer = null;\n        this.countdownTimer = null;\n\n        // Setup a promise to resolve when the IMA manager is ready\n        this.managerPromise = new Promise((resolve, reject) => {\n            // The ad is loaded and ready\n            this.on('loaded', resolve);\n\n            // Ads failed\n            this.on('error', reject);\n        });\n\n        this.load();\n    }\n\n    get enabled() {\n        return this.player.isVideo && this.player.config.ads.enabled && !utils.is.empty(this.publisherId);\n    }\n\n    /**\n     * Load the IMA SDK\n     */\n    load() {\n        if (this.enabled) {\n            // Check if the Google IMA3 SDK is loaded or load it ourselves\n            if (!utils.is.object(window.google) || !utils.is.object(window.google.ima)) {\n                utils\n                    .loadScript(this.player.config.urls.googleIMA.sdk)\n                    .then(() => {\n                        this.ready();\n                    })\n                    .catch(() => {\n                        // Script failed to load or is blocked\n                        this.trigger('error', new Error('Google IMA SDK failed to load'));\n                    });\n            } else {\n                this.ready();\n            }\n        }\n    }\n\n    /**\n     * Get the ads instance ready\n     */\n    ready() {\n        // Start ticking our safety timer. If the whole advertisement\n        // thing doesn't resolve within our set time; we bail\n        this.startSafetyTimer(12000, 'ready()');\n\n        // Clear the safety timer\n        this.managerPromise.then(() => {\n            this.clearSafetyTimer('onAdsManagerLoaded()');\n        });\n\n        // Set listeners on the Plyr instance\n        this.listeners();\n\n        // Setup the IMA SDK\n        this.setupIMA();\n    }\n\n    // Build the default tag URL\n    get tagUrl() {\n        const params = {\n            AV_PUBLISHERID: '58c25bb0073ef448b1087ad6',\n            AV_CHANNELID: '5a0458dc28a06145e4519d21',\n            AV_URL: location.hostname,\n            cb: Date.now(),\n            AV_WIDTH: 640,\n            AV_HEIGHT: 480,\n            AV_CDIM2: this.publisherId,\n        };\n\n        const base = 'https://go.aniview.com/api/adserver6/vast/';\n\n        return `${base}?${utils.buildUrlParams(params)}`;\n    }\n\n    /**\n     * In order for the SDK to display ads for our video, we need to tell it where to put them,\n     * so here we define our ad container. This div is set up to render on top of the video player.\n     * Using the code below, we tell the SDK to render ads within that div. We also provide a\n     * handle to the content video player - the SDK will poll the current time of our player to\n     * properly place mid-rolls. After we create the ad display container, we initialize it. On\n     * mobile devices, this initialization is done as the result of a user action.\n     */\n    setupIMA() {\n        // Create the container for our advertisements\n        this.elements.container = utils.createElement('div', {\n            class: this.player.config.classNames.ads,\n        });\n        this.player.elements.container.appendChild(this.elements.container);\n\n        // So we can run VPAID2\n        google.ima.settings.setVpaidMode(google.ima.ImaSdkSettings.VpaidMode.ENABLED);\n\n        // Set language\n        google.ima.settings.setLocale(this.player.config.ads.language);\n\n        // We assume the adContainer is the video container of the plyr element\n        // that will house the ads\n        this.elements.displayContainer = new google.ima.AdDisplayContainer(this.elements.container);\n\n        // Request video ads to be pre-loaded\n        this.requestAds();\n    }\n\n    /**\n     * Request advertisements\n     */\n    requestAds() {\n        const { container } = this.player.elements;\n\n        try {\n            // Create ads loader\n            this.loader = new google.ima.AdsLoader(this.elements.displayContainer);\n\n            // Listen and respond to ads loaded and error events\n            this.loader.addEventListener(google.ima.AdsManagerLoadedEvent.Type.ADS_MANAGER_LOADED, event => this.onAdsManagerLoaded(event), false);\n            this.loader.addEventListener(google.ima.AdErrorEvent.Type.AD_ERROR, error => this.onAdError(error), false);\n\n            // Request video ads\n            const request = new google.ima.AdsRequest();\n            request.adTagUrl = this.tagUrl;\n\n            // Specify the linear and nonlinear slot sizes. This helps the SDK\n            // to select the correct creative if multiple are returned\n            request.linearAdSlotWidth = container.offsetWidth;\n            request.linearAdSlotHeight = container.offsetHeight;\n            request.nonLinearAdSlotWidth = container.offsetWidth;\n            request.nonLinearAdSlotHeight = container.offsetHeight;\n\n            // We only overlay ads as we only support video.\n            request.forceNonLinearFullSlot = false;\n\n            // Mute based on current state\n            request.setAdWillPlayMuted(!this.player.muted);\n\n            this.loader.requestAds(request);\n        } catch (e) {\n            this.onAdError(e);\n        }\n    }\n\n    /**\n     * Update the ad countdown\n     * @param {boolean} start\n     */\n    pollCountdown(start = false) {\n        if (!start) {\n            clearInterval(this.countdownTimer);\n            this.elements.container.removeAttribute('data-badge-text');\n            return;\n        }\n\n        const update = () => {\n            const time = utils.formatTime(Math.max(this.manager.getRemainingTime(), 0));\n            const label = `${i18n.get('advertisement', this.player.config)} - ${time}`;\n            this.elements.container.setAttribute('data-badge-text', label);\n        };\n\n        this.countdownTimer = setInterval(update, 100);\n    }\n\n    /**\n     * This method is called whenever the ads are ready inside the AdDisplayContainer\n     * @param {Event} adsManagerLoadedEvent\n     */\n    onAdsManagerLoaded(event) {\n        // Get the ads manager\n        const settings = new google.ima.AdsRenderingSettings();\n\n        // Tell the SDK to save and restore content video state on our behalf\n        settings.restoreCustomPlaybackStateOnAdBreakComplete = true;\n        settings.enablePreloading = true;\n\n        // The SDK is polling currentTime on the contentPlayback. And needs a duration\n        // so it can determine when to start the mid- and post-roll\n        this.manager = event.getAdsManager(this.player, settings);\n\n        // Get the cue points for any mid-rolls by filtering out the pre- and post-roll\n        this.cuePoints = this.manager.getCuePoints();\n\n        // Add advertisement cue's within the time line if available\n        if (!utils.is.empty(this.cuePoints)) {\n            this.cuePoints.forEach(cuePoint => {\n                if (cuePoint !== 0 && cuePoint !== -1 && cuePoint < this.player.duration) {\n                    const seekElement = this.player.elements.progress;\n\n                    if (utils.is.element(seekElement)) {\n                        const cuePercentage = 100 / this.player.duration * cuePoint;\n                        const cue = utils.createElement('span', {\n                            class: this.player.config.classNames.cues,\n                        });\n\n                        cue.style.left = `${cuePercentage.toString()}%`;\n                        seekElement.appendChild(cue);\n                    }\n                }\n            });\n        }\n\n        // Get skippable state\n        // TODO: Skip button\n        // this.player.debug.warn(this.manager.getAdSkippableState());\n\n        // Set volume to match player\n        this.manager.setVolume(this.player.volume);\n\n        // Add listeners to the required events\n        // Advertisement error events\n        this.manager.addEventListener(google.ima.AdErrorEvent.Type.AD_ERROR, error => this.onAdError(error));\n\n        // Advertisement regular events\n        Object.keys(google.ima.AdEvent.Type).forEach(type => {\n            this.manager.addEventListener(google.ima.AdEvent.Type[type], event => this.onAdEvent(event));\n        });\n\n        // Resolve our adsManager\n        this.trigger('loaded');\n    }\n\n    /**\n     * This is where all the event handling takes place. Retrieve the ad from the event. Some\n     * events (e.g. ALL_ADS_COMPLETED) don't have the ad object associated\n     * https://developers.google.com/interactive-media-ads/docs/sdks/html5/v3/apis#ima.AdEvent.Type\n     * @param {Event} event\n     */\n    onAdEvent(event) {\n        const { container } = this.player.elements;\n\n        // Retrieve the ad from the event. Some events (e.g. ALL_ADS_COMPLETED)\n        // don't have ad object associated\n        const ad = event.getAd();\n\n        // Proxy event\n        const dispatchEvent = type => {\n            const event = `ads${type.replace(/_/g, '').toLowerCase()}`;\n            utils.dispatchEvent.call(this.player, this.player.media, event);\n        };\n\n        switch (event.type) {\n            case google.ima.AdEvent.Type.LOADED:\n                // This is the first event sent for an ad - it is possible to determine whether the\n                // ad is a video ad or an overlay\n                this.trigger('loaded');\n\n                // Bubble event\n                dispatchEvent(event.type);\n\n                // Start countdown\n                this.pollCountdown(true);\n\n                if (!ad.isLinear()) {\n                    // Position AdDisplayContainer correctly for overlay\n                    ad.width = container.offsetWidth;\n                    ad.height = container.offsetHeight;\n                }\n\n                // console.info('Ad type: ' + event.getAd().getAdPodInfo().getPodIndex());\n                // console.info('Ad time: ' + event.getAd().getAdPodInfo().getTimeOffset());\n                break;\n\n            case google.ima.AdEvent.Type.ALL_ADS_COMPLETED:\n                // All ads for the current videos are done. We can now request new advertisements\n                // in case the video is re-played\n\n                // Fire event\n                dispatchEvent(event.type);\n\n                // TODO: Example for what happens when a next video in a playlist would be loaded.\n                // So here we load a new video when all ads are done.\n                // Then we load new ads within a new adsManager. When the video\n                // Is started - after - the ads are loaded, then we get ads.\n                // You can also easily test cancelling and reloading by running\n                // player.ads.cancel() and player.ads.play from the console I guess.\n                // this.player.source = {\n                //     type: 'video',\n                //     title: 'View From A Blue Moon',\n                //     sources: [{\n                //         src:\n                // 'https://cdn.plyr.io/static/demo/View_From_A_Blue_Moon_Trailer-HD.mp4', type:\n                // 'video/mp4', }], poster:\n                // 'https://cdn.plyr.io/static/demo/View_From_A_Blue_Moon_Trailer-HD.jpg', tracks:\n                // [ { kind: 'captions', label: 'English', srclang: 'en', src:\n                // 'https://cdn.plyr.io/static/demo/View_From_A_Blue_Moon_Trailer-HD.en.vtt',\n                // default: true, }, { kind: 'captions', label: 'French', srclang: 'fr', src:\n                // 'https://cdn.plyr.io/static/demo/View_From_A_Blue_Moon_Trailer-HD.fr.vtt', }, ],\n                // };\n\n                // TODO: So there is still this thing where a video should only be allowed to start\n                // playing when the IMA SDK is ready or has failed\n\n                this.loadAds();\n                break;\n\n            case google.ima.AdEvent.Type.CONTENT_PAUSE_REQUESTED:\n                // This event indicates the ad has started - the video player can adjust the UI,\n                // for example display a pause button and remaining time. Fired when content should\n                // be paused. This usually happens right before an ad is about to cover the content\n\n                dispatchEvent(event.type);\n\n                this.pauseContent();\n\n                break;\n\n            case google.ima.AdEvent.Type.CONTENT_RESUME_REQUESTED:\n                // This event indicates the ad has finished - the video player can perform\n                // appropriate UI actions, such as removing the timer for remaining time detection.\n                // Fired when content should be resumed. This usually happens when an ad finishes\n                // or collapses\n\n                dispatchEvent(event.type);\n\n                this.pollCountdown();\n\n                this.resumeContent();\n\n                break;\n\n            case google.ima.AdEvent.Type.STARTED:\n            case google.ima.AdEvent.Type.MIDPOINT:\n            case google.ima.AdEvent.Type.COMPLETE:\n            case google.ima.AdEvent.Type.IMPRESSION:\n            case google.ima.AdEvent.Type.CLICK:\n                dispatchEvent(event.type);\n                break;\n\n            default:\n                break;\n        }\n    }\n\n    /**\n     * Any ad error handling comes through here\n     * @param {Event} event\n     */\n    onAdError(event) {\n        this.cancel();\n        this.player.debug.warn('Ads error', event);\n    }\n\n    /**\n     * Setup hooks for Plyr and window events. This ensures\n     * the mid- and post-roll launch at the correct time. And\n     * resize the advertisement when the player resizes\n     */\n    listeners() {\n        const { container } = this.player.elements;\n        let time;\n\n        // Add listeners to the required events\n        this.player.on('ended', () => {\n            this.loader.contentComplete();\n        });\n\n        this.player.on('seeking', () => {\n            time = this.player.currentTime;\n            return time;\n        });\n\n        this.player.on('seeked', () => {\n            const seekedTime = this.player.currentTime;\n\n            if (utils.is.empty(this.cuePoints)) {\n                return;\n            }\n\n            this.cuePoints.forEach((cuePoint, index) => {\n                if (time < cuePoint && cuePoint < seekedTime) {\n                    this.manager.discardAdBreak();\n                    this.cuePoints.splice(index, 1);\n                }\n            });\n        });\n\n        // Listen to the resizing of the window. And resize ad accordingly\n        // TODO: eventually implement ResizeObserver\n        window.addEventListener('resize', () => {\n            if (this.manager) {\n                this.manager.resize(container.offsetWidth, container.offsetHeight, google.ima.ViewMode.NORMAL);\n            }\n        });\n    }\n\n    /**\n     * Initialize the adsManager and start playing advertisements\n     */\n    play() {\n        const { container } = this.player.elements;\n\n        if (!this.managerPromise) {\n            this.resumeContent();\n        }\n\n        // Play the requested advertisement whenever the adsManager is ready\n        this.managerPromise\n            .then(() => {\n                // Initialize the container. Must be done via a user action on mobile devices\n                this.elements.displayContainer.initialize();\n\n                try {\n                    if (!this.initialized) {\n                        // Initialize the ads manager. Ad rules playlist will start at this time\n                        this.manager.init(container.offsetWidth, container.offsetHeight, google.ima.ViewMode.NORMAL);\n\n                        // Call play to start showing the ad. Single video and overlay ads will\n                        // start at this time; the call will be ignored for ad rules\n                        this.manager.start();\n                    }\n\n                    this.initialized = true;\n                } catch (adError) {\n                    // An error may be thrown if there was a problem with the\n                    // VAST response\n                    this.onAdError(adError);\n                }\n            })\n            .catch(() => {});\n    }\n\n    /**\n     * Resume our video\n     */\n    resumeContent() {\n        // Hide the advertisement container\n        this.elements.container.style.zIndex = '';\n\n        // Ad is stopped\n        this.playing = false;\n\n        // Play our video\n        if (this.player.currentTime < this.player.duration) {\n            this.player.play();\n        }\n    }\n\n    /**\n     * Pause our video\n     */\n    pauseContent() {\n        // Show the advertisement container\n        this.elements.container.style.zIndex = 3;\n\n        // Ad is playing.\n        this.playing = true;\n\n        // Pause our video.\n        this.player.pause();\n    }\n\n    /**\n     * Destroy the adsManager so we can grab new ads after this. If we don't then we're not\n     * allowed to call new ads based on google policies, as they interpret this as an accidental\n     * video requests. https://developers.google.com/interactive-\n     * media-ads/docs/sdks/android/faq#8\n     */\n    cancel() {\n        // Pause our video\n        if (this.initialized) {\n            this.resumeContent();\n        }\n\n        // Tell our instance that we're done for now\n        this.trigger('error');\n\n        // Re-create our adsManager\n        this.loadAds();\n    }\n\n    /**\n     * Re-create our adsManager\n     */\n    loadAds() {\n        // Tell our adsManager to go bye bye\n        this.managerPromise\n            .then(() => {\n                // Destroy our adsManager\n                if (this.manager) {\n                    this.manager.destroy();\n                }\n\n                // Re-set our adsManager promises\n                this.managerPromise = new Promise(resolve => {\n                    this.on('loaded', resolve);\n                    this.player.debug.log(this.manager);\n                });\n\n                // Now request some new advertisements\n                this.requestAds();\n            })\n            .catch(() => {});\n    }\n\n    /**\n     * Handles callbacks after an ad event was invoked\n     * @param {string} event - Event type\n     */\n    trigger(event, ...args) {\n        const handlers = this.events[event];\n\n        if (utils.is.array(handlers)) {\n            handlers.forEach(handler => {\n                if (utils.is.function(handler)) {\n                    handler.apply(this, args);\n                }\n            });\n        }\n    }\n\n    /**\n     * Add event listeners\n     * @param {string} event - Event type\n     * @param {function} callback - Callback for when event occurs\n     * @return {Ads}\n     */\n    on(event, callback) {\n        if (!utils.is.array(this.events[event])) {\n            this.events[event] = [];\n        }\n\n        this.events[event].push(callback);\n\n        return this;\n    }\n\n    /**\n     * Setup a safety timer for when the ad network doesn't respond for whatever reason.\n     * The advertisement has 12 seconds to get its things together. We stop this timer when the\n     * advertisement is playing, or when a user action is required to start, then we clear the\n     * timer on ad ready\n     * @param {number} time\n     * @param {string} from\n     */\n    startSafetyTimer(time, from) {\n        this.player.debug.log(`Safety timer invoked from: ${from}`);\n\n        this.safetyTimer = setTimeout(() => {\n            this.cancel();\n            this.clearSafetyTimer('startSafetyTimer()');\n        }, time);\n    }\n\n    /**\n     * Clear our safety timer(s)\n     * @param {string} from\n     */\n    clearSafetyTimer(from) {\n        if (!utils.is.nullOrUndefined(this.safetyTimer)) {\n            this.player.debug.log(`Safety timer cleared from: ${from}`);\n\n            clearTimeout(this.safetyTimer);\n            this.safetyTimer = null;\n        }\n    }\n}\n\nexport default Ads;\n","// ==========================================================================\n// Plyr source update\n// ==========================================================================\n\nimport html5 from './html5';\nimport media from './media';\nimport support from './support';\nimport { providers } from './types';\nimport ui from './ui';\nimport utils from './utils';\n\nconst source = {\n    // Add elements to HTML5 media (source, tracks, etc)\n    insertElements(type, attributes) {\n        if (utils.is.string(attributes)) {\n            utils.insertElement(type, this.media, {\n                src: attributes,\n            });\n        } else if (utils.is.array(attributes)) {\n            attributes.forEach(attribute => {\n                utils.insertElement(type, this.media, attribute);\n            });\n        }\n    },\n\n    // Update source\n    // Sources are not checked for support so be careful\n    change(input) {\n        if (!utils.is.object(input) || !('sources' in input) || !input.sources.length) {\n            this.debug.warn('Invalid source format');\n            return;\n        }\n\n        // Cancel current network requests\n        html5.cancelRequests.call(this);\n\n        // Destroy instance and re-setup\n        this.destroy.call(\n            this,\n            () => {\n                // Reset quality options\n                this.options.quality = [];\n\n                // Remove elements\n                utils.removeElement(this.media);\n                this.media = null;\n\n                // Reset class name\n                if (utils.is.element(this.elements.container)) {\n                    this.elements.container.removeAttribute('class');\n                }\n\n                // Set the type and provider\n                this.type = input.type;\n                this.provider = !utils.is.empty(input.sources[0].provider) ? input.sources[0].provider : providers.html5;\n\n                // Check for support\n                this.supported = support.check(this.type, this.provider, this.config.playsinline);\n\n                // Create new markup\n                switch (`${this.provider}:${this.type}`) {\n                    case 'html5:video':\n                        this.media = utils.createElement('video');\n                        break;\n\n                    case 'html5:audio':\n                        this.media = utils.createElement('audio');\n                        break;\n\n                    case 'youtube:video':\n                    case 'vimeo:video':\n                        this.media = utils.createElement('div', {\n                            src: input.sources[0].src,\n                        });\n                        break;\n\n                    default:\n                        break;\n                }\n\n                // Inject the new element\n                this.elements.container.appendChild(this.media);\n\n                // Autoplay the new source?\n                if (utils.is.boolean(input.autoplay)) {\n                    this.config.autoplay = input.autoplay;\n                }\n\n                // Set attributes for audio and video\n                if (this.isHTML5) {\n                    if (this.config.crossorigin) {\n                        this.media.setAttribute('crossorigin', '');\n                    }\n                    if (this.config.autoplay) {\n                        this.media.setAttribute('autoplay', '');\n                    }\n                    if (!utils.is.empty(input.poster)) {\n                        this.poster = input.poster;\n                    }\n                    if (this.config.loop.active) {\n                        this.media.setAttribute('loop', '');\n                    }\n                    if (this.config.muted) {\n                        this.media.setAttribute('muted', '');\n                    }\n                    if (this.config.playsinline) {\n                        this.media.setAttribute('playsinline', '');\n                    }\n                }\n\n                // Restore class hook\n                ui.addStyleHook.call(this);\n\n                // Set new sources for html5\n                if (this.isHTML5) {\n                    source.insertElements.call(this, 'source', input.sources);\n                }\n\n                // Set video title\n                this.config.title = input.title;\n\n                // Set up from scratch\n                media.setup.call(this);\n\n                // HTML5 stuff\n                if (this.isHTML5) {\n                    // Setup captions\n                    if ('tracks' in input) {\n                        source.insertElements.call(this, 'track', input.tracks);\n                    }\n\n                    // Load HTML5 sources\n                    this.media.load();\n                }\n\n                // If HTML5 or embed but not fully supported, setupInterface and call ready now\n                if (this.isHTML5 || (this.isEmbed && !this.supported.ui)) {\n                    // Setup interface\n                    ui.build.call(this);\n                }\n\n                // Update the fullscreen support\n                this.fullscreen.update();\n            },\n            true,\n        );\n    },\n};\n\nexport default source;\n","// ==========================================================================\n// Plyr storage\n// ==========================================================================\n\nimport utils from './utils';\n\nclass Storage {\n    constructor(player) {\n        this.enabled = player.config.storage.enabled;\n        this.key = player.config.storage.key;\n    }\n\n    // Check for actual support (see if we can use it)\n    static get supported() {\n        try {\n            if (!('localStorage' in window)) {\n                return false;\n            }\n\n            const test = '___test';\n\n            // Try to use it (it might be disabled, e.g. user is in private mode)\n            // see: https://github.com/sampotts/plyr/issues/131\n            window.localStorage.setItem(test, test);\n            window.localStorage.removeItem(test);\n\n            return true;\n        } catch (e) {\n            return false;\n        }\n    }\n\n    get(key) {\n        if (!Storage.supported) {\n            return null;\n        }\n\n        const store = window.localStorage.getItem(this.key);\n\n        if (utils.is.empty(store)) {\n            return null;\n        }\n\n        const json = JSON.parse(store);\n\n        return utils.is.string(key) && key.length ? json[key] : json;\n    }\n\n    set(object) {\n        // Bail if we don't have localStorage support or it's disabled\n        if (!Storage.supported || !this.enabled) {\n            return;\n        }\n\n        // Can only store objectst\n        if (!utils.is.object(object)) {\n            return;\n        }\n\n        // Get current storage\n        let storage = this.get();\n\n        // Default to empty object\n        if (utils.is.empty(storage)) {\n            storage = {};\n        }\n\n        // Update the working copy of the values\n        utils.extend(storage, object);\n\n        // Update storage\n        window.localStorage.setItem(this.key, JSON.stringify(storage));\n    }\n}\n\nexport default Storage;\n","// ==========================================================================\n// Plyr\n// plyr.js v3.3.7\n// https://github.com/sampotts/plyr\n// License: The MIT License (MIT)\n// ==========================================================================\n\nimport captions from './captions';\nimport Console from './console';\nimport controls from './controls';\nimport defaults from './defaults';\nimport Fullscreen from './fullscreen';\nimport Listeners from './listeners';\nimport media from './media';\nimport Ads from './plugins/ads';\nimport source from './source';\nimport Storage from './storage';\nimport support from './support';\nimport { providers, types } from './types';\nimport ui from './ui';\nimport utils from './utils';\n\n// Private properties\n// TODO: Use a WeakMap for private globals\n// const globals = new WeakMap();\n\n// Plyr instance\nclass Plyr {\n    constructor(target, options) {\n        this.timers = {};\n\n        // State\n        this.ready = false;\n        this.loading = false;\n        this.failed = false;\n\n        // Touch device\n        this.touch = support.touch;\n\n        // Set the media element\n        this.media = target;\n\n        // String selector passed\n        if (utils.is.string(this.media)) {\n            this.media = document.querySelectorAll(this.media);\n        }\n\n        // jQuery, NodeList or Array passed, use first element\n        if ((window.jQuery && this.media instanceof jQuery) || utils.is.nodeList(this.media) || utils.is.array(this.media)) {\n            // eslint-disable-next-line\n            this.media = this.media[0];\n        }\n\n        // Set config\n        this.config = utils.extend(\n            {},\n            defaults,\n            options || {},\n            (() => {\n                try {\n                    return JSON.parse(this.media.getAttribute('data-plyr-config'));\n                } catch (e) {\n                    return {};\n                }\n            })(),\n        );\n\n        // Elements cache\n        this.elements = {\n            container: null,\n            buttons: {},\n            display: {},\n            progress: {},\n            inputs: {},\n            settings: {\n                menu: null,\n                panes: {},\n                tabs: {},\n            },\n            captions: null,\n        };\n\n        // Captions\n        this.captions = {\n            active: null,\n            currentTrack: null,\n        };\n\n        // Fullscreen\n        this.fullscreen = {\n            active: false,\n        };\n\n        // Options\n        this.options = {\n            speed: [],\n            quality: [],\n            captions: [],\n        };\n\n        // Debugging\n        // TODO: move to globals\n        this.debug = new Console(this.config.debug);\n\n        // Log config options and support\n        this.debug.log('Config', this.config);\n        this.debug.log('Support', support);\n\n        // We need an element to setup\n        if (utils.is.nullOrUndefined(this.media) || !utils.is.element(this.media)) {\n            this.debug.error('Setup failed: no suitable element passed');\n            return;\n        }\n\n        // Bail if the element is initialized\n        if (this.media.plyr) {\n            this.debug.warn('Target already setup');\n            return;\n        }\n\n        // Bail if not enabled\n        if (!this.config.enabled) {\n            this.debug.error('Setup failed: disabled by config');\n            return;\n        }\n\n        // Bail if disabled or no basic support\n        // You may want to disable certain UAs etc\n        if (!support.check().api) {\n            this.debug.error('Setup failed: no support');\n            return;\n        }\n\n        // Cache original element state for .destroy()\n        const clone = this.media.cloneNode(true);\n        clone.autoplay = false;\n        this.elements.original = clone;\n\n        // Set media type based on tag or data attribute\n        // Supported: video, audio, vimeo, youtube\n        const type = this.media.tagName.toLowerCase();\n\n        // Embed properties\n        let iframe = null;\n        let url = null;\n        let params = null;\n\n        // Different setup based on type\n        switch (type) {\n            case 'div':\n                // Find the frame\n                iframe = this.media.querySelector('iframe');\n\n                // <iframe> type\n                if (utils.is.element(iframe)) {\n                    // Detect provider\n                    url = iframe.getAttribute('src');\n                    this.provider = utils.getProviderByUrl(url);\n\n                    // Rework elements\n                    this.elements.container = this.media;\n                    this.media = iframe;\n\n                    // Reset classname\n                    this.elements.container.className = '';\n\n                    // Get attributes from URL and set config\n                    params = utils.getUrlParams(url);\n                    if (!utils.is.empty(params)) {\n                        const truthy = [\n                            '1',\n                            'true',\n                        ];\n\n                        if (truthy.includes(params.autoplay)) {\n                            this.config.autoplay = true;\n                        }\n                        if (truthy.includes(params.loop)) {\n                            this.config.loop.active = true;\n                        }\n\n                        // TODO: replace fullscreen.iosNative with this playsinline config option\n                        // YouTube requires the playsinline in the URL\n                        if (this.isYouTube) {\n                            this.config.playsinline = truthy.includes(params.playsinline);\n                        } else {\n                            this.config.playsinline = true;\n                        }\n                    }\n                } else {\n                    // <div> with attributes\n                    this.provider = this.media.getAttribute(this.config.attributes.embed.provider);\n\n                    // Remove attribute\n                    this.media.removeAttribute(this.config.attributes.embed.provider);\n                }\n\n                // Unsupported or missing provider\n                if (utils.is.empty(this.provider) || !Object.keys(providers).includes(this.provider)) {\n                    this.debug.error('Setup failed: Invalid provider');\n                    return;\n                }\n\n                // Audio will come later for external providers\n                this.type = types.video;\n\n                break;\n\n            case 'video':\n            case 'audio':\n                this.type = type;\n                this.provider = providers.html5;\n\n                // Get config from attributes\n                if (this.media.hasAttribute('crossorigin')) {\n                    this.config.crossorigin = true;\n                }\n                if (this.media.hasAttribute('autoplay')) {\n                    this.config.autoplay = true;\n                }\n                if (this.media.hasAttribute('playsinline')) {\n                    this.config.playsinline = true;\n                }\n                if (this.media.hasAttribute('muted')) {\n                    this.config.muted = true;\n                }\n                if (this.media.hasAttribute('loop')) {\n                    this.config.loop.active = true;\n                }\n\n                break;\n\n            default:\n                this.debug.error('Setup failed: unsupported type');\n                return;\n        }\n\n        // Check for support again but with type\n        this.supported = support.check(this.type, this.provider, this.config.playsinline);\n\n        // If no support for even API, bail\n        if (!this.supported.api) {\n            this.debug.error('Setup failed: no support');\n            return;\n        }\n\n        // Create listeners\n        this.listeners = new Listeners(this);\n\n        // Setup local storage for user settings\n        this.storage = new Storage(this);\n\n        // Store reference\n        this.media.plyr = this;\n\n        // Wrap media\n        if (!utils.is.element(this.elements.container)) {\n            this.elements.container = utils.createElement('div');\n            utils.wrap(this.media, this.elements.container);\n        }\n\n        // Allow focus to be captured\n        this.elements.container.setAttribute('tabindex', 0);\n\n        // Add style hook\n        ui.addStyleHook.call(this);\n\n        // Setup media\n        media.setup.call(this);\n\n        // Listen for events if debugging\n        if (this.config.debug) {\n            utils.on(this.elements.container, this.config.events.join(' '), event => {\n                this.debug.log(`event: ${event.type}`);\n            });\n        }\n\n        // Setup interface\n        // If embed but not fully supported, build interface now to avoid flash of controls\n        if (this.isHTML5 || (this.isEmbed && !this.supported.ui)) {\n            ui.build.call(this);\n        }\n\n        // Container listeners\n        this.listeners.container();\n\n        // Global listeners\n        this.listeners.global();\n\n        // Setup fullscreen\n        this.fullscreen = new Fullscreen(this);\n\n        // Setup ads if provided\n        this.ads = new Ads(this);\n\n        // Autoplay if required\n        if (this.config.autoplay) {\n            this.play();\n        }\n    }\n\n    // ---------------------------------------\n    // API\n    // ---------------------------------------\n\n    /**\n     * Types and provider helpers\n     */\n    get isHTML5() {\n        return Boolean(this.provider === providers.html5);\n    }\n    get isEmbed() {\n        return Boolean(this.isYouTube || this.isVimeo);\n    }\n    get isYouTube() {\n        return Boolean(this.provider === providers.youtube);\n    }\n    get isVimeo() {\n        return Boolean(this.provider === providers.vimeo);\n    }\n    get isVideo() {\n        return Boolean(this.type === types.video);\n    }\n    get isAudio() {\n        return Boolean(this.type === types.audio);\n    }\n\n    /**\n     * Play the media, or play the advertisement (if they are not blocked)\n     */\n    play() {\n        if (!utils.is.function(this.media.play)) {\n            return null;\n        }\n\n        // Return the promise (for HTML5)\n        return this.media.play();\n    }\n\n    /**\n     * Pause the media\n     */\n    pause() {\n        if (!this.playing || !utils.is.function(this.media.pause)) {\n            return;\n        }\n\n        this.media.pause();\n    }\n\n    /**\n     * Get playing state\n     */\n    get playing() {\n        return Boolean(this.ready && !this.paused && !this.ended);\n    }\n\n    /**\n     * Get paused state\n     */\n    get paused() {\n        return Boolean(this.media.paused);\n    }\n\n    /**\n     * Get stopped state\n     */\n    get stopped() {\n        return Boolean(this.paused && this.currentTime === 0);\n    }\n\n    /**\n     * Get ended state\n     */\n    get ended() {\n        return Boolean(this.media.ended);\n    }\n\n    /**\n     * Toggle playback based on current status\n     * @param {boolean} input\n     */\n    togglePlay(input) {\n        // Toggle based on current state if nothing passed\n        const toggle = utils.is.boolean(input) ? input : !this.playing;\n\n        if (toggle) {\n            this.play();\n        } else {\n            this.pause();\n        }\n    }\n\n    /**\n     * Stop playback\n     */\n    stop() {\n        if (this.isHTML5) {\n            this.pause();\n            this.restart();\n        } else if (utils.is.function(this.media.stop)) {\n            this.media.stop();\n        }\n    }\n\n    /**\n     * Restart playback\n     */\n    restart() {\n        this.currentTime = 0;\n    }\n\n    /**\n     * Rewind\n     * @param {number} seekTime - how far to rewind in seconds. Defaults to the config.seekTime\n     */\n    rewind(seekTime) {\n        this.currentTime = this.currentTime - (utils.is.number(seekTime) ? seekTime : this.config.seekTime);\n    }\n\n    /**\n     * Fast forward\n     * @param {number} seekTime - how far to fast forward in seconds. Defaults to the config.seekTime\n     */\n    forward(seekTime) {\n        this.currentTime = this.currentTime + (utils.is.number(seekTime) ? seekTime : this.config.seekTime);\n    }\n\n    /**\n     * Seek to a time\n     * @param {number} input - where to seek to in seconds. Defaults to 0 (the start)\n     */\n    set currentTime(input) {\n        let targetTime = 0;\n\n        if (utils.is.number(input)) {\n            targetTime = input;\n        }\n\n        // Normalise targetTime\n        if (targetTime < 0) {\n            targetTime = 0;\n        } else if (targetTime > this.duration) {\n            targetTime = this.duration;\n        }\n\n        // Set\n        this.media.currentTime = targetTime;\n\n        // Logging\n        this.debug.log(`Seeking to ${this.currentTime} seconds`);\n    }\n\n    /**\n     * Get current time\n     */\n    get currentTime() {\n        return Number(this.media.currentTime);\n    }\n\n    /**\n     * Get buffered\n     */\n    get buffered() {\n        const { buffered } = this.media;\n\n        // YouTube / Vimeo return a float between 0-1\n        if (utils.is.number(buffered)) {\n            return buffered;\n        }\n\n        // HTML5\n        // TODO: Handle buffered chunks of the media\n        // (i.e. seek to another section buffers only that section)\n        if (buffered && buffered.length && this.duration > 0) {\n            return buffered.end(0) / this.duration;\n        }\n\n        return 0;\n    }\n\n    /**\n     * Get seeking status\n     */\n    get seeking() {\n        return Boolean(this.media.seeking);\n    }\n\n    /**\n     * Get the duration of the current media\n     */\n    get duration() {\n        // Faux duration set via config\n        const fauxDuration = parseFloat(this.config.duration);\n\n        // True duration\n        const realDuration = this.media ? Number(this.media.duration) : 0;\n\n        // If custom duration is funky, use regular duration\n        return !Number.isNaN(fauxDuration) ? fauxDuration : realDuration;\n    }\n\n    /**\n     * Set the player volume\n     * @param {number} value - must be between 0 and 1. Defaults to the value from local storage and config.volume if not set in storage\n     */\n    set volume(value) {\n        let volume = value;\n        const max = 1;\n        const min = 0;\n\n        if (utils.is.string(volume)) {\n            volume = Number(volume);\n        }\n\n        // Load volume from storage if no value specified\n        if (!utils.is.number(volume)) {\n            volume = this.storage.get('volume');\n        }\n\n        // Use config if all else fails\n        if (!utils.is.number(volume)) {\n            ({ volume } = this.config);\n        }\n\n        // Maximum is volumeMax\n        if (volume > max) {\n            volume = max;\n        }\n        // Minimum is volumeMin\n        if (volume < min) {\n            volume = min;\n        }\n\n        // Update config\n        this.config.volume = volume;\n\n        // Set the player volume\n        this.media.volume = volume;\n\n        // If muted, and we're increasing volume manually, reset muted state\n        if (!utils.is.empty(value) && this.muted && volume > 0) {\n            this.muted = false;\n        }\n    }\n\n    /**\n     * Get the current player volume\n     */\n    get volume() {\n        return Number(this.media.volume);\n    }\n\n    /**\n     * Increase volume\n     * @param {boolean} step - How much to decrease by (between 0 and 1)\n     */\n    increaseVolume(step) {\n        const volume = this.media.muted ? 0 : this.volume;\n        this.volume = volume + (utils.is.number(step) ? step : 1);\n    }\n\n    /**\n     * Decrease volume\n     * @param {boolean} step - How much to decrease by (between 0 and 1)\n     */\n    decreaseVolume(step) {\n        const volume = this.media.muted ? 0 : this.volume;\n        this.volume = volume - (utils.is.number(step) ? step : 1);\n    }\n\n    /**\n     * Set muted state\n     * @param {boolean} mute\n     */\n    set muted(mute) {\n        let toggle = mute;\n\n        // Load muted state from storage\n        if (!utils.is.boolean(toggle)) {\n            toggle = this.storage.get('muted');\n        }\n\n        // Use config if all else fails\n        if (!utils.is.boolean(toggle)) {\n            toggle = this.config.muted;\n        }\n\n        // Update config\n        this.config.muted = toggle;\n\n        // Set mute on the player\n        this.media.muted = toggle;\n    }\n\n    /**\n     * Get current muted state\n     */\n    get muted() {\n        return Boolean(this.media.muted);\n    }\n\n    /**\n     * Check if the media has audio\n     */\n    get hasAudio() {\n        // Assume yes for all non HTML5 (as we can't tell...)\n        if (!this.isHTML5) {\n            return true;\n        }\n\n        if (this.isAudio) {\n            return true;\n        }\n\n        // Get audio tracks\n        return (\n            Boolean(this.media.mozHasAudio) ||\n            Boolean(this.media.webkitAudioDecodedByteCount) ||\n            Boolean(this.media.audioTracks && this.media.audioTracks.length)\n        );\n    }\n\n    /**\n     * Set playback speed\n     * @param {number} speed - the speed of playback (0.5-2.0)\n     */\n    set speed(input) {\n        let speed = null;\n\n        if (utils.is.number(input)) {\n            speed = input;\n        }\n\n        if (!utils.is.number(speed)) {\n            speed = this.storage.get('speed');\n        }\n\n        if (!utils.is.number(speed)) {\n            speed = this.config.speed.selected;\n        }\n\n        // Set min/max\n        if (speed < 0.1) {\n            speed = 0.1;\n        }\n        if (speed > 2.0) {\n            speed = 2.0;\n        }\n\n        if (!this.config.speed.options.includes(speed)) {\n            this.debug.warn(`Unsupported speed (${speed})`);\n            return;\n        }\n\n        // Update config\n        this.config.speed.selected = speed;\n\n        // Set media speed\n        this.media.playbackRate = speed;\n    }\n\n    /**\n     * Get current playback speed\n     */\n    get speed() {\n        return Number(this.media.playbackRate);\n    }\n\n    /**\n     * Set playback quality\n     * Currently HTML5 & YouTube only\n     * @param {number} input - Quality level\n     */\n    set quality(input) {\n        let quality = null;\n\n        if (!utils.is.empty(input)) {\n            quality = Number(input);\n        }\n\n        if (!utils.is.number(quality) || quality === 0) {\n            quality = this.storage.get('quality');\n        }\n\n        if (!utils.is.number(quality)) {\n            quality = this.config.quality.selected;\n        }\n\n        if (!utils.is.number(quality)) {\n            quality = this.config.quality.default;\n        }\n\n        if (!this.options.quality.length) {\n            return;\n        }\n\n        if (!this.options.quality.includes(quality)) {\n            const closest = utils.closest(this.options.quality, quality);\n            this.debug.warn(`Unsupported quality option: ${quality}, using ${closest} instead`);\n            quality = closest;\n        }\n\n        // Update config\n        this.config.quality.selected = quality;\n\n        // Set quality\n        this.media.quality = quality;\n    }\n\n    /**\n     * Get current quality level\n     */\n    get quality() {\n        return this.media.quality;\n    }\n\n    /**\n     * Toggle loop\n     * TODO: Finish fancy new logic. Set the indicator on load as user may pass loop as config\n     * @param {boolean} input - Whether to loop or not\n     */\n    set loop(input) {\n        const toggle = utils.is.boolean(input) ? input : this.config.loop.active;\n        this.config.loop.active = toggle;\n        this.media.loop = toggle;\n\n        // Set default to be a true toggle\n        /* const type = ['start', 'end', 'all', 'none', 'toggle'].includes(input) ? input : 'toggle';\n\n        switch (type) {\n            case 'start':\n                if (this.config.loop.end && this.config.loop.end <= this.currentTime) {\n                    this.config.loop.end = null;\n                }\n                this.config.loop.start = this.currentTime;\n                // this.config.loop.indicator.start = this.elements.display.played.value;\n                break;\n\n            case 'end':\n                if (this.config.loop.start >= this.currentTime) {\n                    return this;\n                }\n                this.config.loop.end = this.currentTime;\n                // this.config.loop.indicator.end = this.elements.display.played.value;\n                break;\n\n            case 'all':\n                this.config.loop.start = 0;\n                this.config.loop.end = this.duration - 2;\n                this.config.loop.indicator.start = 0;\n                this.config.loop.indicator.end = 100;\n                break;\n\n            case 'toggle':\n                if (this.config.loop.active) {\n                    this.config.loop.start = 0;\n                    this.config.loop.end = null;\n                } else {\n                    this.config.loop.start = 0;\n                    this.config.loop.end = this.duration - 2;\n                }\n                break;\n\n            default:\n                this.config.loop.start = 0;\n                this.config.loop.end = null;\n                break;\n        } */\n    }\n\n    /**\n     * Get current loop state\n     */\n    get loop() {\n        return Boolean(this.media.loop);\n    }\n\n    /**\n     * Set new media source\n     * @param {object} input - The new source object (see docs)\n     */\n    set source(input) {\n        source.change.call(this, input);\n    }\n\n    /**\n     * Get current source\n     */\n    get source() {\n        return this.media.currentSrc;\n    }\n\n    /**\n     * Set the poster image for a video\n     * @param {input} - the URL for the new poster image\n     */\n    set poster(input) {\n        if (!this.isVideo) {\n            this.debug.warn('Poster can only be set for video');\n            return;\n        }\n\n        if (utils.is.string(input)) {\n            this.media.setAttribute('poster', input);\n            ui.setPoster.call(this);\n        }\n    }\n\n    /**\n     * Get the current poster image\n     */\n    get poster() {\n        if (!this.isVideo) {\n            return null;\n        }\n\n        return this.media.getAttribute('poster');\n    }\n\n    /**\n     * Set the autoplay state\n     * @param {boolean} input - Whether to autoplay or not\n     */\n    set autoplay(input) {\n        const toggle = utils.is.boolean(input) ? input : this.config.autoplay;\n        this.config.autoplay = toggle;\n    }\n\n    /**\n     * Get the current autoplay state\n     */\n    get autoplay() {\n        return Boolean(this.config.autoplay);\n    }\n\n    /**\n     * Toggle captions\n     * @param {boolean} input - Whether to enable captions\n     */\n    toggleCaptions(input) {\n        // If there's no full support\n        if (!this.supported.ui) {\n            return;\n        }\n\n        // If the method is called without parameter, toggle based on current value\n        const show = utils.is.boolean(input) ? input : !this.elements.container.classList.contains(this.config.classNames.captions.active);\n\n        // Nothing to change...\n        if (this.captions.active === show) {\n            return;\n        }\n\n        // Set global\n        this.captions.active = show;\n\n        // Toggle state\n        utils.toggleState(this.elements.buttons.captions, this.captions.active);\n\n        // Add class hook\n        utils.toggleClass(this.elements.container, this.config.classNames.captions.active, this.captions.active);\n\n        // Trigger an event\n        utils.dispatchEvent.call(this, this.media, this.captions.active ? 'captionsenabled' : 'captionsdisabled');\n    }\n\n    /**\n     * Set the captions language\n     * @param {string} - Two character ISO language code (e.g. EN, FR, PT, etc)\n     */\n    set language(input) {\n        // Nothing specified\n        if (!utils.is.string(input)) {\n            return;\n        }\n\n        // If empty string is passed, assume disable captions\n        if (utils.is.empty(input)) {\n            this.toggleCaptions(false);\n            return;\n        }\n\n        // Normalize\n        const language = input.toLowerCase();\n\n        // Check for support\n        if (!this.options.captions.includes(language)) {\n            this.debug.warn(`Unsupported language option: ${language}`);\n            return;\n        }\n\n        // Ensure captions are enabled\n        this.toggleCaptions(true);\n\n        // Enabled only\n        if (language === 'enabled') {\n            return;\n        }\n\n        // If nothing to change, bail\n        if (this.language === language) {\n            return;\n        }\n\n        // Update config\n        this.captions.language = language;\n\n        // Clear caption\n        captions.setText.call(this, null);\n\n        // Update captions\n        captions.setLanguage.call(this);\n\n        // Trigger an event\n        utils.dispatchEvent.call(this, this.media, 'languagechange');\n    }\n\n    /**\n     * Get the current captions language\n     */\n    get language() {\n        return this.captions.language;\n    }\n\n    /**\n     * Toggle picture-in-picture playback on WebKit/MacOS\n     * TODO: update player with state, support, enabled\n     * TODO: detect outside changes\n     */\n    set pip(input) {\n        const states = {\n            pip: 'picture-in-picture',\n            inline: 'inline',\n        };\n\n        // Bail if no support\n        if (!support.pip) {\n            return;\n        }\n\n        // Toggle based on current state if not passed\n        const toggle = utils.is.boolean(input) ? input : this.pip === states.inline;\n\n        // Toggle based on current state\n        this.media.webkitSetPresentationMode(toggle ? states.pip : states.inline);\n    }\n\n    /**\n     * Get the current picture-in-picture state\n     */\n    get pip() {\n        if (!support.pip) {\n            return null;\n        }\n\n        return this.media.webkitPresentationMode;\n    }\n\n    /**\n     * Trigger the airplay dialog\n     * TODO: update player with state, support, enabled\n     */\n    airplay() {\n        // Show dialog if supported\n        if (support.airplay) {\n            this.media.webkitShowPlaybackTargetPicker();\n        }\n    }\n\n    /**\n     * Toggle the player controls\n     * @param {boolean} toggle - Whether to show the controls\n     */\n    toggleControls(toggle) {\n        // We need controls of course...\n        if (!utils.is.element(this.elements.controls)) {\n            return;\n        }\n\n        // Don't hide if no UI support or it's audio\n        if (!this.supported.ui || this.isAudio) {\n            return;\n        }\n\n        let delay = 0;\n        let show = toggle;\n        let isEnterFullscreen = false;\n\n        // Get toggle state if not set\n        if (!utils.is.boolean(toggle)) {\n            if (utils.is.event(toggle)) {\n                // Is the enter fullscreen event\n                isEnterFullscreen = toggle.type === 'enterfullscreen';\n\n                // Events that show the controls\n                const showEvents = [\n                    'touchstart',\n                    'touchmove',\n                    'mouseenter',\n                    'mousemove',\n                    'focusin',\n                ];\n\n                // Events that delay hiding\n                const delayEvents = [\n                    'touchmove',\n                    'touchend',\n                    'mousemove',\n                ];\n\n                // Whether to show controls\n                show = showEvents.includes(toggle.type);\n\n                // Delay hiding on move events\n                if (delayEvents.includes(toggle.type)) {\n                    delay = 2000;\n                }\n\n                // Delay a little more for keyboard users\n                if (!this.touch && toggle.type === 'focusin') {\n                    delay = 3000;\n                    utils.toggleClass(this.elements.controls, this.config.classNames.noTransition, true);\n                }\n            } else {\n                show = utils.hasClass(this.elements.container, this.config.classNames.hideControls);\n            }\n        }\n\n        // Clear timer on every call\n        clearTimeout(this.timers.controls);\n\n        // If the mouse is not over the controls, set a timeout to hide them\n        if (show || this.paused || this.loading) {\n            // Check if controls toggled\n            const toggled = utils.toggleClass(this.elements.container, this.config.classNames.hideControls, false);\n\n            // Trigger event\n            if (toggled) {\n                utils.dispatchEvent.call(this, this.media, 'controlsshown');\n            }\n\n            // Always show controls when paused or if touch\n            if (this.paused || this.loading) {\n                return;\n            }\n\n            // Delay for hiding on touch\n            if (this.touch) {\n                delay = 3000;\n            }\n        }\n\n        // If toggle is false or if we're playing (regardless of toggle),\n        // then set the timer to hide the controls\n        if (!show || this.playing) {\n            this.timers.controls = setTimeout(() => {\n                // We need controls of course...\n                if (!utils.is.element(this.elements.controls)) {\n                    return;\n                }\n\n                // If the mouse is over the controls (and not entering fullscreen), bail\n                if ((this.elements.controls.pressed || this.elements.controls.hover) && !isEnterFullscreen) {\n                    return;\n                }\n\n                // Restore transition behaviour\n                if (!utils.hasClass(this.elements.container, this.config.classNames.hideControls)) {\n                    utils.toggleClass(this.elements.controls, this.config.classNames.noTransition, false);\n                }\n\n                // Set hideControls class\n                const toggled = utils.toggleClass(this.elements.container, this.config.classNames.hideControls, this.config.hideControls);\n\n                // Trigger event and close menu\n                if (toggled) {\n                    utils.dispatchEvent.call(this, this.media, 'controlshidden');\n\n                    if (this.config.controls.includes('settings') && !utils.is.empty(this.config.settings)) {\n                        controls.toggleMenu.call(this, false);\n                    }\n                }\n            }, delay);\n        }\n    }\n\n    /**\n     * Add event listeners\n     * @param {string} event - Event type\n     * @param {function} callback - Callback for when event occurs\n     */\n    on(event, callback) {\n        utils.on(this.elements.container, event, callback);\n    }\n\n    /**\n     * Remove event listeners\n     * @param {string} event - Event type\n     * @param {function} callback - Callback for when event occurs\n     */\n    off(event, callback) {\n        utils.off(this.elements.container, event, callback);\n    }\n\n    /**\n     * Destroy an instance\n     * Event listeners are removed when elements are removed\n     * http://stackoverflow.com/questions/12528049/if-a-dom-element-is-removed-are-its-listeners-also-removed-from-memory\n     * @param {function} callback - Callback for when destroy is complete\n     * @param {boolean} soft - Whether it's a soft destroy (for source changes etc)\n     */\n    destroy(callback, soft = false) {\n        if (!this.ready) {\n            return;\n        }\n\n        const done = () => {\n            // Reset overflow (incase destroyed while in fullscreen)\n            document.body.style.overflow = '';\n\n            // GC for embed\n            this.embed = null;\n\n            // If it's a soft destroy, make minimal changes\n            if (soft) {\n                if (Object.keys(this.elements).length) {\n                    // Remove elements\n                    utils.removeElement(this.elements.buttons.play);\n                    utils.removeElement(this.elements.captions);\n                    utils.removeElement(this.elements.controls);\n                    utils.removeElement(this.elements.wrapper);\n\n                    // Clear for GC\n                    this.elements.buttons.play = null;\n                    this.elements.captions = null;\n                    this.elements.controls = null;\n                    this.elements.wrapper = null;\n                }\n\n                // Callback\n                if (utils.is.function(callback)) {\n                    callback();\n                }\n            } else {\n                // Unbind listeners\n                this.listeners.clear();\n\n                // Replace the container with the original element provided\n                utils.replaceElement(this.elements.original, this.elements.container);\n\n                // Event\n                utils.dispatchEvent.call(this, this.elements.original, 'destroyed', true);\n\n                // Callback\n                if (utils.is.function(callback)) {\n                    callback.call(this.elements.original);\n                }\n\n                // Reset state\n                this.ready = false;\n\n                // Clear for garbage collection\n                setTimeout(() => {\n                    this.elements = null;\n                    this.media = null;\n                }, 200);\n            }\n        };\n\n        // Stop playback\n        this.stop();\n\n        // Type specific stuff\n        switch (`${this.provider}:${this.type}`) {\n            case 'html5:video':\n            case 'html5:audio':\n                // Clear timeout\n                clearTimeout(this.timers.loading);\n\n                // Restore native video controls\n                ui.toggleNativeControls.call(this, true);\n\n                // Clean up\n                done();\n\n                break;\n\n            case 'youtube:video':\n                // Clear timers\n                clearInterval(this.timers.buffering);\n                clearInterval(this.timers.playing);\n\n                // Destroy YouTube API\n                if (this.embed !== null && utils.is.function(this.embed.destroy)) {\n                    this.embed.destroy();\n                }\n\n                // Clean up\n                done();\n\n                break;\n\n            case 'vimeo:video':\n                // Destroy Vimeo API\n                // then clean up (wait, to prevent postmessage errors)\n                if (this.embed !== null) {\n                    this.embed.unload().then(done);\n                }\n\n                // Vimeo does not always return\n                setTimeout(done, 200);\n\n                break;\n\n            default:\n                break;\n        }\n    }\n\n    /**\n     * Check for support for a mime type (HTML5 only)\n     * @param {string} type - Mime type\n     */\n    supports(type) {\n        return support.mime.call(this, type);\n    }\n\n    /**\n     * Check for support\n     * @param {string} type - Player type (audio/video)\n     * @param {string} provider - Provider (html5/youtube/vimeo)\n     * @param {bool} inline - Where player has `playsinline` sttribute\n     */\n    static supported(type, provider, inline) {\n        return support.check(type, provider, inline);\n    }\n\n    /**\n     * Load an SVG sprite into the page\n     * @param {string} url - URL for the SVG sprite\n     * @param {string} [id] - Unique ID\n     */\n    static loadSprite(url, id) {\n        return utils.loadSprite(url, id);\n    }\n\n    /**\n     * Setup multiple instances\n     * @param {*} selector\n     * @param {object} options\n     */\n    static setup(selector, options = {}) {\n        let targets = null;\n\n        if (utils.is.string(selector)) {\n            targets = Array.from(document.querySelectorAll(selector));\n        } else if (utils.is.nodeList(selector)) {\n            targets = Array.from(selector);\n        } else if (utils.is.array(selector)) {\n            targets = selector.filter(i => utils.is.element(i));\n        }\n\n        if (utils.is.empty(targets)) {\n            return null;\n        }\n\n        return targets.map(t => new Plyr(t, options));\n    }\n}\n\nexport default Plyr;\n"]}